{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# RideShare Pro\n\n## Overview\n\nRideShare Pro is a full-stack ride booking platform built with React and Express. The application allows users to browse available vehicles, make bookings, and complete payments through Stripe integration. It features a modern UI with shadcn/ui components, comprehensive admin controls, and secure authentication through Replit Auth.\n\nThe platform serves both regular users who can book rides and administrators who can manage the vehicle fleet and view analytics. The application includes real-time booking management, payment processing, and a responsive design that works across desktop and mobile devices.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript using Vite as the build tool\n- **Routing**: Wouter for client-side routing with conditional rendering based on authentication state\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **UI Framework**: shadcn/ui components built on Radix UI primitives with Tailwind CSS for styling\n- **Forms**: React Hook Form with Zod validation for type-safe form handling\n\n### Backend Architecture\n- **Framework**: Express.js with TypeScript running on Node.js\n- **Database**: PostgreSQL with Drizzle ORM for type-safe database operations\n- **Authentication**: Replit Auth with OpenID Connect, using Passport.js for session management\n- **Session Storage**: PostgreSQL-backed sessions using connect-pg-simple\n- **API Design**: RESTful endpoints with proper error handling and request logging middleware\n\n### Data Storage Solutions\n- **Primary Database**: Neon PostgreSQL for production data\n- **ORM**: Drizzle with code-first schema definitions in TypeScript\n- **Migration Strategy**: Drizzle Kit for database schema migrations\n- **Session Management**: Database-stored sessions with configurable TTL\n\n### Authentication and Authorization\n- **Provider**: Replit Auth with OpenID Connect protocol\n- **Session Management**: Server-side sessions stored in PostgreSQL\n- **Access Control**: Role-based permissions (user/admin) with middleware protection\n- **Security**: HTTP-only cookies, CSRF protection, and secure session configuration\n\n### Key Design Patterns\n- **Monorepo Structure**: Shared schema and types between client and server\n- **Type Safety**: End-to-end TypeScript with shared interfaces and Zod validation\n- **Error Handling**: Centralized error handling with user-friendly error messages\n- **Data Fetching**: React Query for caching, background updates, and optimistic updates\n- **Component Architecture**: Reusable UI components with proper separation of concerns\n\n## External Dependencies\n\n### Payment Processing\n- **Stripe**: Complete payment processing with Elements for secure card collection\n- **Integration**: Server-side payment intent creation and client-side confirmation\n- **Security**: PCI-compliant payment handling with webhook support\n\n### Database Services\n- **Neon**: Serverless PostgreSQL with connection pooling\n- **WebSocket Support**: Real-time capabilities through WebSocket connections\n\n### UI and Design\n- **Radix UI**: Accessible component primitives for complex UI interactions\n- **Tailwind CSS**: Utility-first CSS framework with custom design system\n- **Lucide Icons**: Consistent icon library for UI elements\n- **Google Fonts**: Custom typography with Inter and other web fonts\n\n### Development Tools\n- **ESBuild**: Fast bundling for production server builds\n- **Vite**: Development server with hot module replacement\n- **TypeScript**: Static type checking across the entire application\n- **Replit Integration**: Development environment integration with error overlays and debugging tools","size_bytes":3770},"tailwind.config.ts":{"content":"\nimport type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      fontFamily: {\n        sans: ['Plus Jakarta Sans', 'Inter', 'DM Sans', 'system-ui', '-apple-system', 'BlinkMacSystemFont', 'Segoe UI', 'sans-serif'],\n        display: ['Plus Jakarta Sans', 'Inter', 'system-ui', 'sans-serif'],\n        body: ['DM Sans', 'Inter', 'system-ui', 'sans-serif'],\n        serif: ['ui-serif', 'Georgia', 'Cambria', 'Times New Roman', 'serif'],\n        mono: ['ui-monospace', 'SFMono-Regular', 'Monaco', 'Consolas', 'Liberation Mono', 'Courier New', 'monospace'],\n        inter: ['Inter', 'sans-serif'],\n        poppins: ['Poppins', 'sans-serif'],\n        jakarta: ['Plus Jakarta Sans', 'sans-serif'],\n        'dm-sans': ['DM Sans', 'sans-serif'],\n      },\n      fontSize: {\n        'xs': ['0.75rem', { lineHeight: '1rem' }],\n        'sm': ['0.875rem', { lineHeight: '1.25rem' }],\n        'base': ['1rem', { lineHeight: '1.5rem' }],\n        'lg': ['1.125rem', { lineHeight: '1.75rem' }],\n        'xl': ['1.25rem', { lineHeight: '1.75rem' }],\n        '2xl': ['1.5rem', { lineHeight: '2rem' }],\n        '3xl': ['1.875rem', { lineHeight: '2.25rem' }],\n        '4xl': ['2.25rem', { lineHeight: '2.5rem' }],\n        '5xl': ['3rem', { lineHeight: '1' }],\n        '6xl': ['3.75rem', { lineHeight: '1' }],\n      },\n      colors: {\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        primary: {\n          DEFAULT: \"hsl(230, 95%, 55%)\",\n          50: \"hsl(230, 95%, 98%)\",\n          100: \"hsl(230, 95%, 95%)\",\n          200: \"hsl(230, 95%, 90%)\",\n          300: \"hsl(230, 95%, 80%)\",\n          400: \"hsl(230, 95%, 68%)\",\n          500: \"hsl(230, 95%, 55%)\",\n          600: \"hsl(230, 85%, 48%)\",\n          700: \"hsl(230, 75%, 42%)\",\n          800: \"hsl(230, 65%, 36%)\",\n          900: \"hsl(230, 55%, 30%)\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(215, 25%, 27%)\",\n          50: \"hsl(215, 25%, 97%)\",\n          100: \"hsl(215, 25%, 93%)\",\n          200: \"hsl(215, 25%, 87%)\",\n          300: \"hsl(215, 25%, 77%)\",\n          400: \"hsl(215, 25%, 62%)\",\n          500: \"hsl(215, 25%, 47%)\",\n          600: \"hsl(215, 25%, 37%)\",\n          700: \"hsl(215, 25%, 27%)\",\n          800: \"hsl(215, 25%, 17%)\",\n          900: \"hsl(215, 25%, 12%)\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(0, 84%, 60%)\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(210, 40%, 96%)\",\n          foreground: \"hsl(215, 16%, 47%)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(160, 84%, 39%)\",\n          50: \"hsl(160, 84%, 97%)\",\n          100: \"hsl(160, 84%, 93%)\",\n          200: \"hsl(160, 84%, 87%)\",\n          300: \"hsl(160, 84%, 77%)\",\n          400: \"hsl(160, 84%, 62%)\",\n          500: \"hsl(160, 84%, 46%)\",\n          600: \"hsl(160, 84%, 39%)\",\n          700: \"hsl(160, 84%, 29%)\",\n          800: \"hsl(160, 84%, 24%)\",\n          900: \"hsl(160, 84%, 19%)\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        warning: {\n          DEFAULT: \"hsl(38, 92%, 50%)\",\n          50: \"hsl(38, 92%, 97%)\",\n          100: \"hsl(38, 92%, 93%)\",\n          200: \"hsl(38, 92%, 87%)\",\n          300: \"hsl(38, 92%, 77%)\",\n          400: \"hsl(38, 92%, 62%)\",\n          500: \"hsl(38, 92%, 50%)\",\n          600: \"hsl(38, 92%, 40%)\",\n          700: \"hsl(38, 92%, 30%)\",\n          800: \"hsl(38, 92%, 25%)\",\n          900: \"hsl(38, 92%, 20%)\",\n          foreground: \"hsl(var(--warning-foreground))\",\n        },\n        success: {\n          DEFAULT: \"hsl(142, 76%, 36%)\",\n          50: \"hsl(142, 76%, 97%)\",\n          100: \"hsl(142, 76%, 93%)\",\n          200: \"hsl(142, 76%, 87%)\",\n          300: \"hsl(142, 76%, 77%)\",\n          400: \"hsl(142, 76%, 62%)\",\n          500: \"hsl(142, 76%, 46%)\",\n          600: \"hsl(142, 76%, 36%)\",\n          700: \"hsl(142, 76%, 26%)\",\n          800: \"hsl(142, 76%, 21%)\",\n          900: \"hsl(142, 76%, 16%)\",\n          foreground: \"hsl(0, 0%, 98%)\",\n        },\n        chart: {\n          \"1\": \"hsl(220, 100%, 60%)\",\n          \"2\": \"hsl(142, 76%, 36%)\",\n          \"3\": \"hsl(38, 92%, 50%)\",\n          \"4\": \"hsl(280, 100%, 70%)\",\n          \"5\": \"hsl(340, 75%, 55%)\",\n        },\n        sidebar: {\n          DEFAULT: \"hsl(var(--sidebar))\",\n          foreground: \"hsl(var(--sidebar-foreground))\",\n          primary: \"hsl(var(--sidebar-primary))\",\n          \"primary-foreground\": \"hsl(var(--sidebar-primary-foreground))\",\n          accent: \"hsl(var(--sidebar-accent))\",\n          \"accent-foreground\": \"hsl(var(--sidebar-accent-foreground))\",\n          border: \"hsl(var(--sidebar-border))\",\n          ring: \"hsl(var(--sidebar-ring))\",\n        },\n      },\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n        xl: \"calc(var(--radius) + 4px)\",\n        \"2xl\": \"calc(var(--radius) + 8px)\",\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n        fadeIn: {\n          from: { opacity: \"0\", transform: \"translateY(30px)\" },\n          to: { opacity: \"1\", transform: \"translateY(0)\" },\n        },\n        slideUp: {\n          from: { opacity: \"0\", transform: \"translateY(20px)\" },\n          to: { opacity: \"1\", transform: \"translateY(0)\" },\n        },\n        scaleIn: {\n          from: { opacity: \"0\", transform: \"scale(0.9)\" },\n          to: { opacity: \"1\", transform: \"scale(1)\" },\n        },\n        slideInLeft: {\n          from: { opacity: \"0\", transform: \"translateX(-50px)\" },\n          to: { opacity: \"1\", transform: \"translateX(0)\" },\n        },\n        slideInRight: {\n          from: { opacity: \"0\", transform: \"translateX(50px)\" },\n          to: { opacity: \"1\", transform: \"translateX(0)\" },\n        },\n        float: {\n          \"0%, 100%\": { transform: \"translateY(0px)\" },\n          \"50%\": { transform: \"translateY(-10px)\" },\n        },\n        bounce: {\n          \"0%, 20%, 53%, 80%, 100%\": { transform: \"translateY(0)\" },\n          \"40%, 43%\": { transform: \"translateY(-10px)\" },\n          \"70%\": { transform: \"translateY(-5px)\" },\n          \"90%\": { transform: \"translateY(-2px)\" },\n        },\n        pulse: {\n          \"0%, 100%\": { opacity: \"1\" },\n          \"50%\": { opacity: \"0.7\" },\n        },\n        shimmer: {\n          \"0%\": { backgroundPosition: \"-468px 0\" },\n          \"100%\": { backgroundPosition: \"468px 0\" },\n        },\n        gradient: {\n          \"0%\": { backgroundPosition: \"0% 50%\" },\n          \"50%\": { backgroundPosition: \"100% 50%\" },\n          \"100%\": { backgroundPosition: \"0% 50%\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"fadeIn\": \"fadeIn 0.8s cubic-bezier(0.4, 0, 0.2, 1)\",\n        \"slideUp\": \"slideUp 0.6s cubic-bezier(0.4, 0, 0.2, 1)\",\n        \"scaleIn\": \"scaleIn 0.5s cubic-bezier(0.4, 0, 0.2, 1)\",\n        \"slideInLeft\": \"slideInLeft 0.8s cubic-bezier(0.4, 0, 0.2, 1)\",\n        \"slideInRight\": \"slideInRight 0.8s cubic-bezier(0.4, 0, 0.2, 1)\",\n        \"float\": \"float 3s ease-in-out infinite\",\n        \"bounce-gentle\": \"bounce 2s infinite\",\n        \"pulse-slow\": \"pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite\",\n        \"shimmer\": \"shimmer 1.5s ease-in-out infinite\",\n        \"gradient\": \"gradient 3s ease infinite\",\n      },\n      boxShadow: {\n        'xs': '0 1px 2px 0 rgba(0, 0, 0, 0.05)',\n        'sm': '0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06)',\n        'DEFAULT': '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)',\n        'md': '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)',\n        'lg': '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)',\n        'xl': '0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)',\n        '2xl': '0 25px 50px -12px rgba(0, 0, 0, 0.25)',\n        'inner': 'inset 0 2px 4px 0 rgba(0, 0, 0, 0.06)',\n        'card': '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)',\n        'card-hover': '0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)',\n      },\n      spacing: {\n        '18': '4.5rem',\n        '88': '22rem',\n        '128': '32rem',\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":9176},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen(port, \"0.0.0.0\", () => {\n    log(`serving on port ${port}`);\n    console.log(`Server accessible at http://0.0.0.0:${port}`);\n  });\n})();\n","size_bytes":2088},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4221},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport Stripe from \"stripe\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport { insertRideSchema, insertBookingSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nif (!process.env.STRIPE_SECRET_KEY) {\n  throw new Error('Missing required Stripe secret: STRIPE_SECRET_KEY');\n}\n\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY, {\n  apiVersion: \"2025-07-30.basil\",\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n\n  // Auth routes\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Ride routes\n  app.get('/api/rides', async (req, res) => {\n    try {\n      const filters = req.query as any;\n      const rides = await storage.getAllRides(filters);\n      res.json(rides);\n    } catch (error) {\n      console.error(\"Error fetching rides:\", error);\n      res.status(500).json({ message: \"Failed to fetch rides\" });\n    }\n  });\n\n  app.get('/api/rides/:id', async (req, res) => {\n    try {\n      const ride = await storage.getRideById(req.params.id);\n      if (!ride) {\n        return res.status(404).json({ message: \"Ride not found\" });\n      }\n      res.json(ride);\n    } catch (error) {\n      console.error(\"Error fetching ride:\", error);\n      res.status(500).json({ message: \"Failed to fetch ride\" });\n    }\n  });\n\n  // Admin-only ride management\n  app.post('/api/rides', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const validatedData = insertRideSchema.parse(req.body);\n      const ride = await storage.createRide(validatedData);\n      res.json(ride);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid ride data\", errors: error.errors });\n      }\n      console.error(\"Error creating ride:\", error);\n      res.status(500).json({ message: \"Failed to create ride\" });\n    }\n  });\n\n  app.put('/api/rides/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const validatedData = insertRideSchema.partial().parse(req.body);\n      const ride = await storage.updateRide(req.params.id, validatedData);\n      res.json(ride);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid ride data\", errors: error.errors });\n      }\n      console.error(\"Error updating ride:\", error);\n      res.status(500).json({ message: \"Failed to update ride\" });\n    }\n  });\n\n  // Booking routes\n  app.post('/api/bookings', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const bookingData = {\n        ...req.body,\n        userId,\n        status: 'pending'\n      };\n\n      const validatedData = insertBookingSchema.parse(bookingData);\n      const booking = await storage.createBooking(validatedData);\n      res.json(booking);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid booking data\", errors: error.errors });\n      }\n      console.error(\"Error creating booking:\", error);\n      res.status(500).json({ message: \"Failed to create booking\" });\n    }\n  });\n\n  app.get('/api/bookings', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n\n      let bookings;\n      if (user?.isAdmin) {\n        bookings = await storage.getAllBookings();\n      } else {\n        bookings = await storage.getUserBookings(userId);\n      }\n      \n      res.json(bookings);\n    } catch (error) {\n      console.error(\"Error fetching bookings:\", error);\n      res.status(500).json({ message: \"Failed to fetch bookings\" });\n    }\n  });\n\n  app.get('/api/bookings/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const booking = await storage.getBookingById(req.params.id);\n      if (!booking) {\n        return res.status(404).json({ message: \"Booking not found\" });\n      }\n\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n\n      // Check if user owns the booking or is admin\n      if (booking.userId !== userId && !user?.isAdmin) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      res.json(booking);\n    } catch (error) {\n      console.error(\"Error fetching booking:\", error);\n      res.status(500).json({ message: \"Failed to fetch booking\" });\n    }\n  });\n\n  // Stripe payment route\n  app.post(\"/api/create-payment-intent\", isAuthenticated, async (req, res) => {\n    try {\n      const { amount, bookingId } = req.body;\n      \n      const paymentIntent = await stripe.paymentIntents.create({\n        amount: Math.round(amount * 100), // Convert to cents\n        currency: \"usd\",\n        metadata: {\n          bookingId: bookingId || '',\n        },\n      });\n\n      if (bookingId) {\n        await storage.updateBookingStatus(bookingId, 'pending', paymentIntent.id);\n      }\n\n      res.json({ clientSecret: paymentIntent.client_secret });\n    } catch (error: any) {\n      console.error(\"Error creating payment intent:\", error);\n      res.status(500).json({ message: \"Error creating payment intent: \" + error.message });\n    }\n  });\n\n  // Confirm payment\n  app.post(\"/api/confirm-payment\", isAuthenticated, async (req, res) => {\n    try {\n      const { paymentIntentId } = req.body;\n      \n      const paymentIntent = await stripe.paymentIntents.retrieve(paymentIntentId);\n      \n      if (paymentIntent.status === 'succeeded') {\n        const bookingId = paymentIntent.metadata.bookingId;\n        if (bookingId) {\n          await storage.updateBookingStatus(bookingId, 'confirmed', paymentIntentId);\n        }\n        res.json({ success: true });\n      } else {\n        res.status(400).json({ message: \"Payment not successful\" });\n      }\n    } catch (error: any) {\n      console.error(\"Error confirming payment:\", error);\n      res.status(500).json({ message: \"Error confirming payment: \" + error.message });\n    }\n  });\n\n  // Analytics (admin only)\n  app.get('/api/analytics', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const analytics = await storage.getAnalytics();\n      res.json(analytics);\n    } catch (error) {\n      console.error(\"Error fetching analytics:\", error);\n      res.status(500).json({ message: \"Failed to fetch analytics\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":7418},"server/storage.ts":{"content":"import {\n  users,\n  rides,\n  bookings,\n  type User,\n  type UpsertUser,\n  type Ride,\n  type InsertRide,\n  type Booking,\n  type InsertBooking,\n  type BookingWithDetails,\n  type RideSearchFilters,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, gte, lte, like, desc, sql } from \"drizzle-orm\";\n\n// Interface for storage operations\nexport interface IStorage {\n  // User operations (IMPORTANT) mandatory for Replit Auth\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n\n  // Ride operations\n  getAllRides(filters?: RideSearchFilters): Promise<Ride[]>;\n  getRideById(id: string): Promise<Ride | undefined>;\n  createRide(ride: InsertRide): Promise<Ride>;\n  updateRide(id: string, ride: Partial<InsertRide>): Promise<Ride>;\n  deleteRide(id: string): Promise<void>;\n\n  // Booking operations\n  createBooking(booking: InsertBooking): Promise<Booking>;\n  getBookingById(id: string): Promise<BookingWithDetails | undefined>;\n  getUserBookings(userId: string): Promise<BookingWithDetails[]>;\n  getAllBookings(): Promise<BookingWithDetails[]>;\n  updateBookingStatus(id: string, status: string, paymentIntentId?: string): Promise<Booking>;\n\n  // Analytics\n  getAnalytics(): Promise<{\n    totalBookings: number;\n    totalRevenue: string;\n    activeRides: number;\n    totalUsers: number;\n  }>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations (IMPORTANT) mandatory for Replit Auth\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  // Ride operations\n  async getAllRides(filters?: RideSearchFilters): Promise<Ride[]> {\n    const conditions = [eq(rides.available, true)];\n\n    if (filters?.carType && filters.carType !== 'All Types') {\n      conditions.push(eq(rides.category, filters.carType));\n    }\n\n    if (filters?.transmission && filters.transmission !== 'Any') {\n      conditions.push(eq(rides.transmission, filters.transmission));\n    }\n\n    if (filters?.fuelType && filters.fuelType !== 'Any') {\n      conditions.push(eq(rides.fuelType, filters.fuelType));\n    }\n\n    if (filters?.location) {\n      conditions.push(like(rides.location, `%${filters.location}%`));\n    }\n\n    return await db\n      .select()\n      .from(rides)\n      .where(and(...conditions))\n      .orderBy(desc(rides.rating));\n  }\n\n  async getRideById(id: string): Promise<Ride | undefined> {\n    const [ride] = await db.select().from(rides).where(eq(rides.id, id));\n    return ride;\n  }\n\n  async createRide(ride: InsertRide): Promise<Ride> {\n    const [newRide] = await db.insert(rides).values(ride).returning();\n    return newRide;\n  }\n\n  async updateRide(id: string, ride: Partial<InsertRide>): Promise<Ride> {\n    const [updatedRide] = await db\n      .update(rides)\n      .set({ ...ride, updatedAt: new Date() })\n      .where(eq(rides.id, id))\n      .returning();\n    return updatedRide;\n  }\n\n  async deleteRide(id: string): Promise<void> {\n    await db.delete(rides).where(eq(rides.id, id));\n  }\n\n  // Booking operations\n  async createBooking(booking: InsertBooking): Promise<Booking> {\n    const [newBooking] = await db.insert(bookings).values(booking).returning();\n    return newBooking;\n  }\n\n  async getBookingById(id: string): Promise<BookingWithDetails | undefined> {\n    const result = await db\n      .select()\n      .from(bookings)\n      .leftJoin(rides, eq(bookings.rideId, rides.id))\n      .leftJoin(users, eq(bookings.userId, users.id))\n      .where(eq(bookings.id, id));\n\n    if (result.length === 0) return undefined;\n\n    const { bookings: booking, rides: ride, users: user } = result[0];\n    return { ...booking, ride: ride!, user: user! };\n  }\n\n  async getUserBookings(userId: string): Promise<BookingWithDetails[]> {\n    const result = await db\n      .select()\n      .from(bookings)\n      .leftJoin(rides, eq(bookings.rideId, rides.id))\n      .leftJoin(users, eq(bookings.userId, users.id))\n      .where(eq(bookings.userId, userId))\n      .orderBy(desc(bookings.createdAt));\n\n    return result.map(({ bookings: booking, rides: ride, users: user }) => ({\n      ...booking,\n      ride: ride!,\n      user: user!,\n    }));\n  }\n\n  async getAllBookings(): Promise<BookingWithDetails[]> {\n    const result = await db\n      .select()\n      .from(bookings)\n      .leftJoin(rides, eq(bookings.rideId, rides.id))\n      .leftJoin(users, eq(bookings.userId, users.id))\n      .orderBy(desc(bookings.createdAt));\n\n    return result.map(({ bookings: booking, rides: ride, users: user }) => ({\n      ...booking,\n      ride: ride!,\n      user: user!,\n    }));\n  }\n\n  async updateBookingStatus(id: string, status: string, paymentIntentId?: string): Promise<Booking> {\n    const updateData: any = { status, updatedAt: new Date() };\n    if (paymentIntentId) {\n      updateData.paymentIntentId = paymentIntentId;\n    }\n\n    const [updatedBooking] = await db\n      .update(bookings)\n      .set(updateData)\n      .where(eq(bookings.id, id))\n      .returning();\n    return updatedBooking;\n  }\n\n  // Analytics\n  async getAnalytics() {\n    const [bookingCount] = await db\n      .select({ count: sql`count(*)` })\n      .from(bookings);\n\n    const [revenue] = await db\n      .select({ total: sql`sum(total_amount)` })\n      .from(bookings)\n      .where(eq(bookings.status, 'confirmed'));\n\n    const [rideCount] = await db\n      .select({ count: sql`count(*)` })\n      .from(rides)\n      .where(eq(rides.available, true));\n\n    const [userCount] = await db\n      .select({ count: sql`count(*)` })\n      .from(users);\n\n    return {\n      totalBookings: Number(bookingCount.count) || 0,\n      totalRevenue: revenue.total?.toString() || '0',\n      activeRides: Number(rideCount.count) || 0,\n      totalUsers: Number(userCount.count) || 0,\n    };\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":6161},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport { relations } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  decimal,\n  integer,\n  boolean,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table.\n// (IMPORTANT) This table is mandatory for Replit Auth, don't drop it.\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table.\n// (IMPORTANT) This table is mandatory for Replit Auth, don't drop it.\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  isAdmin: boolean(\"is_admin\").default(false),\n  stripeCustomerId: varchar(\"stripe_customer_id\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const rides = pgTable(\"rides\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  model: varchar(\"model\").notNull(),\n  category: varchar(\"category\").notNull(),\n  imageUrl: varchar(\"image_url\").notNull(),\n  pricePerDay: decimal(\"price_per_day\", { precision: 10, scale: 2 }).notNull(),\n  seats: integer(\"seats\").notNull(),\n  transmission: varchar(\"transmission\").notNull(),\n  fuelType: varchar(\"fuel_type\").notNull(),\n  rating: decimal(\"rating\", { precision: 3, scale: 2 }).default(\"0\"),\n  reviewCount: integer(\"review_count\").default(0),\n  available: boolean(\"available\").default(true),\n  location: varchar(\"location\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const bookings = pgTable(\"bookings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  rideId: varchar(\"ride_id\").notNull().references(() => rides.id),\n  pickupDate: timestamp(\"pickup_date\").notNull(),\n  returnDate: timestamp(\"return_date\").notNull(),\n  pickupLocation: varchar(\"pickup_location\").notNull(),\n  driverAge: varchar(\"driver_age\").notNull(),\n  phoneNumber: varchar(\"phone_number\").notNull(),\n  totalAmount: decimal(\"total_amount\", { precision: 10, scale: 2 }).notNull(),\n  paymentIntentId: varchar(\"payment_intent_id\"),\n  status: varchar(\"status\").default(\"pending\"), // pending, confirmed, cancelled, completed\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  bookings: many(bookings),\n}));\n\nexport const ridesRelations = relations(rides, ({ many }) => ({\n  bookings: many(bookings),\n}));\n\nexport const bookingsRelations = relations(bookings, ({ one }) => ({\n  user: one(users, {\n    fields: [bookings.userId],\n    references: [users.id],\n  }),\n  ride: one(rides, {\n    fields: [bookings.rideId],\n    references: [rides.id],\n  }),\n}));\n\n// Schema types\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\n\nexport const insertRideSchema = createInsertSchema(rides).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\nexport type InsertRide = z.infer<typeof insertRideSchema>;\nexport type Ride = typeof rides.$inferSelect;\n\nexport const insertBookingSchema = createInsertSchema(bookings).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  paymentIntentId: true,\n  status: true,\n});\nexport type InsertBooking = z.infer<typeof insertBookingSchema>;\nexport type Booking = typeof bookings.$inferSelect;\n\n// Extended types for API responses\nexport type BookingWithDetails = Booking & {\n  ride: Ride;\n  user: User;\n};\n\nexport type RideSearchFilters = {\n  carType?: string;\n  priceRange?: string;\n  transmission?: string;\n  fuelType?: string;\n  location?: string;\n  pickupDate?: string;\n  returnDate?: string;\n};\n","size_bytes":4152},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\nimport Landing from \"@/pages/landing\";\nimport Home from \"@/pages/home\";\nimport Rides from \"@/pages/rides\";\nimport Booking from \"@/pages/booking\";\nimport Checkout from \"@/pages/checkout\";\nimport UserDashboard from \"@/pages/user-dashboard\";\nimport AdminDashboard from \"@/pages/admin-dashboard\";\nimport About from \"@/pages/about\";\nimport Contact from \"@/pages/contact\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  return (\n    <Switch>\n      {isLoading || !isAuthenticated ? (\n        <>\n          <Route path=\"/\" component={Landing} />\n          <Route path=\"/rides\" component={Rides} />\n          <Route path=\"/about\" component={About} />\n          <Route path=\"/contact\" component={Contact} />\n        </>\n      ) : (\n        <>\n          <Route path=\"/\" component={Home} />\n          <Route path=\"/rides\" component={Rides} />\n          <Route path=\"/booking/:rideId\" component={Booking} />\n          <Route path=\"/checkout/:bookingId\" component={Checkout} />\n          <Route path=\"/dashboard\" component={UserDashboard} />\n          <Route path=\"/admin\" component={AdminDashboard} />\n          <Route path=\"/about\" component={About} />\n          <Route path=\"/contact\" component={Contact} />\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;","size_bytes":1868},"client/src/index.css":{"content":"@import '@fontsource/inter/latin.css';\n@import '@fontsource/poppins/latin.css';\n@import '@fontsource/dm-sans/latin.css';\n@import '@fontsource/plus-jakarta-sans/latin.css';\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(222, 84%, 5%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222, 84%, 5%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222, 84%, 5%);\n  --primary: hsl(230, 95%, 55%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(210, 15%, 96%);\n  --secondary-foreground: hsl(222, 84%, 5%);\n  --muted: hsl(210, 15%, 97%);\n  --muted-foreground: hsl(215, 16%, 47%);\n  --accent: hsl(160, 84%, 39%);\n  --accent-foreground: hsl(0, 0%, 100%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --border: hsl(214, 32%, 91%);\n  --input: hsl(214, 32%, 91%);\n  --ring: hsl(230, 95%, 55%);\n  --chart-1: hsl(230, 95%, 55%);\n  --chart-2: hsl(160, 84%, 39%);\n  --chart-3: hsl(38, 92%, 50%);\n  --chart-4: hsl(280, 100%, 70%);\n  --chart-5: hsl(340, 75%, 55%);\n  --sidebar: hsl(0, 0%, 100%);\n  --sidebar-foreground: hsl(222, 84%, 5%);\n  --sidebar-primary: hsl(230, 95%, 55%);\n  --sidebar-primary-foreground: hsl(0, 0%, 98%);\n  --sidebar-accent: hsl(210, 40%, 94%);\n  --sidebar-accent-foreground: hsl(222, 84%, 5%);\n  --sidebar-border: hsl(214, 32%, 91%);\n  --sidebar-ring: hsl(230, 95%, 55%);\n  --font-sans: 'Plus Jakarta Sans', 'Inter', 'DM Sans', 'system-ui', '-apple-system', 'BlinkMacSystemFont', 'Segoe UI', sans-serif;\n  --font-display: 'Plus Jakarta Sans', 'Inter', 'system-ui', sans-serif;\n  --font-body: 'DM Sans', 'Inter', 'system-ui', sans-serif;\n  --font-serif: 'ui-serif', 'Georgia', 'Cambria', 'Times New Roman', serif;\n  --font-mono: 'ui-monospace', 'SFMono-Regular', 'Monaco', 'Consolas', 'Liberation Mono', 'Courier New', monospace;\n  --radius: 0.875rem;\n  --warning: hsl(38, 92%, 50%);\n  --warning-foreground: hsl(0, 0%, 0%);\n  --surface: hsl(210, 15%, 98%);\n  --surface-foreground: hsl(222, 84%, 5%);\n  --neutral: hsl(210, 8%, 45%);\n  --neutral-foreground: hsl(210, 8%, 95%);\n}\n\n.dark {\n  --background: hsl(222, 84%, 5%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222, 84%, 5%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(222, 84%, 5%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(220, 100%, 60%);\n  --primary-foreground: hsl(222, 84%, 5%);\n  --secondary: hsl(217, 33%, 18%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217, 33%, 18%);\n  --muted-foreground: hsl(215, 20%, 65%);\n  --accent: hsl(142, 76%, 36%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 63%, 31%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217, 33%, 18%);\n  --input: hsl(217, 33%, 18%);\n  --ring: hsl(220, 100%, 60%);\n  --chart-1: hsl(220, 100%, 60%);\n  --chart-2: hsl(142, 76%, 36%);\n  --chart-3: hsl(38, 92%, 50%);\n  --chart-4: hsl(280, 100%, 70%);\n  --chart-5: hsl(340, 75%, 55%);\n  --sidebar: hsl(222, 84%, 5%);\n  --sidebar-foreground: hsl(210, 40%, 98%);\n  --sidebar-primary: hsl(220, 100%, 60%);\n  --sidebar-primary-foreground: hsl(222, 84%, 5%);\n  --sidebar-accent: hsl(217, 33%, 18%);\n  --sidebar-accent-foreground: hsl(210, 40%, 98%);\n  --sidebar-border: hsl(217, 33%, 18%);\n  --sidebar-ring: hsl(220, 100%, 60%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply bg-background text-foreground antialiased;\n    font-family: var(--font-body);\n    font-feature-settings: 'cv02', 'cv03', 'cv04', 'cv11', 'ss01', 'ss02';\n    font-variation-settings: normal;\n    line-height: 1.65;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    text-rendering: optimizeLegibility;\n    scroll-behavior: smooth;\n    letter-spacing: -0.011em;\n  }\n\n  h1, h2, h3, h4, h5, h6 {\n    font-family: var(--font-display);\n    font-weight: 700;\n    letter-spacing: -0.04em;\n    line-height: 1.15;\n    color: hsl(222, 84%, 5%);\n  }\n\n  h1 {\n    @apply text-5xl md:text-6xl lg:text-7xl xl:text-8xl;\n    font-weight: 800;\n    letter-spacing: -0.05em;\n  }\n\n  h2 {\n    @apply text-3xl md:text-4xl lg:text-5xl xl:text-6xl;\n    font-weight: 700;\n    letter-spacing: -0.04em;\n  }\n\n  h3 {\n    @apply text-2xl md:text-3xl lg:text-4xl;\n    font-weight: 650;\n    letter-spacing: -0.03em;\n  }\n\n  h4 {\n    @apply text-xl md:text-2xl lg:text-3xl;\n    font-weight: 600;\n    letter-spacing: -0.02em;\n  }\n\n  h5 {\n    @apply text-lg md:text-xl lg:text-2xl;\n    font-weight: 600;\n    letter-spacing: -0.015em;\n  }\n\n  h6 {\n    @apply text-base md:text-lg lg:text-xl;\n    font-weight: 600;\n    letter-spacing: -0.01em;\n  }\n\n  p {\n    @apply leading-7;\n    font-size: 1.0625rem;\n    color: hsl(215, 16%, 35%);\n    line-height: 1.75;\n  }\n\n  .text-balance {\n    text-wrap: balance;\n  }\n\n  .text-pretty {\n    text-wrap: pretty;\n  }\n\n  .text-large {\n    font-size: 1.125rem;\n    line-height: 1.8;\n  }\n\n  .text-small {\n    font-size: 0.9375rem;\n    line-height: 1.6;\n  }\n\n  .font-display {\n    font-family: var(--font-display);\n  }\n\n  .font-body {\n    font-family: var(--font-body);\n  }\n}\n\n/* Enhanced utility classes for RideShare Pro theme */\n@layer utilities {\n  .bg-grid-pattern {\n    background-image: radial-gradient(circle, rgba(0, 0, 0, 0.1) 1px, transparent 1px);\n    background-size: 20px 20px;\n  }\n\n  .bg-mesh-gradient {\n    background: radial-gradient(ellipse 80% 80% at 50% -20%, rgba(120, 119, 198, 0.3), transparent),\n                radial-gradient(ellipse 80% 80% at 80% 60%, rgba(255, 255, 255, 0.1), transparent),\n                radial-gradient(ellipse 80% 80% at 20% 80%, rgba(120, 119, 198, 0.2), transparent);\n  }\n\n  .text-gradient {\n    background: linear-gradient(135deg, #3b82f6, #8b5cf6);\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n  }\n\n  .card-hover {\n    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n  }\n\n  .card-hover:hover {\n    transform: translateY(-8px);\n    box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);\n  }\n\n  .shimmer {\n    background: linear-gradient(\n      110deg,\n      transparent 40%,\n      rgba(255, 255, 255, 0.5) 50%,\n      transparent 60%\n    );\n    background-size: 200% 100%;\n  }\n\n  .glass-card {\n    background: rgba(255, 255, 255, 0.95);\n    backdrop-filter: blur(20px);\n    border: 1px solid rgba(255, 255, 255, 0.2);\n    box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);\n  }\n\n  .glass-card-dark {\n    background: rgba(0, 0, 0, 0.25);\n    backdrop-filter: blur(20px);\n    border: 1px solid rgba(255, 255, 255, 0.1);\n    box-shadow: 0 8px 32px 0 rgba(0, 0, 0, 0.37);\n  }\n\n  .parallax {\n    transform: translateZ(0);\n    will-change: transform;\n  }\n  .text-primary {\n    color: hsl(220, 100%, 60%);\n  }\n\n  .text-secondary {\n    color: hsl(215, 25%, 27%);\n  }\n\n  .text-accent {\n    color: hsl(142, 76%, 36%);\n  }\n\n  .text-warning {\n    color: hsl(38, 92%, 50%);\n  }\n\n  .text-success {\n    color: hsl(142, 76%, 36%);\n  }\n\n  .bg-primary {\n    background-color: hsl(220, 100%, 60%);\n  }\n\n  .bg-secondary {\n    background-color: hsl(215, 25%, 27%);\n  }\n\n  .bg-accent {\n    background-color: hsl(142, 76%, 36%);\n  }\n\n  .bg-warning {\n    background-color: hsl(38, 92%, 50%);\n  }\n\n  .bg-success {\n    background-color: hsl(142, 76%, 36%);\n  }\n\n  .bg-gradient-primary {\n    background: linear-gradient(135deg, hsl(220, 100%, 60%) 0%, hsl(220, 85%, 54%) 100%);\n  }\n\n  .bg-gradient-accent {\n    background: linear-gradient(135deg, hsl(142, 76%, 36%) 0%, hsl(142, 76%, 26%) 100%);\n  }\n\n  .border-primary {\n    border-color: hsl(220, 100%, 60%);\n  }\n\n  .border-secondary {\n    border-color: hsl(215, 25%, 27%);\n  }\n\n  .border-accent {\n    border-color: hsl(142, 76%, 36%);\n  }\n\n  .hover\\:bg-primary:hover {\n    background-color: hsl(220, 85%, 54%);\n  }\n\n  .hover\\:bg-secondary:hover {\n    background-color: hsl(215, 25%, 22%);\n  }\n\n  .hover\\:bg-accent:hover {\n    background-color: hsl(142, 76%, 26%);\n  }\n\n  .hover\\:bg-warning:hover {\n    background-color: hsl(38, 92%, 40%);\n  }\n\n  .hover\\:shadow-card-hover:hover {\n    box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\n  }\n\n  .glass {\n    background: rgba(255, 255, 255, 0.1);\n    backdrop-filter: blur(10px);\n    border: 1px solid rgba(255, 255, 255, 0.2);\n  }\n\n  .glass-dark {\n    background: rgba(0, 0, 0, 0.1);\n    backdrop-filter: blur(10px);\n    border: 1px solid rgba(255, 255, 255, 0.1);\n  }\n}\n\n/* Lenis Smooth Scrolling */\nhtml.lenis {\n  height: auto;\n}\n\n.lenis.lenis-smooth {\n  scroll-behavior: auto !important;\n}\n\n.lenis.lenis-smooth [data-lenis-prevent] {\n  overscroll-behavior: contain;\n}\n\n/* Enhanced animations */\n@keyframes fadeIn {\n  from { opacity: 0; transform: translateY(30px); }\n  to { opacity: 1; transform: translateY(0); }\n}\n\n@keyframes slideUp {\n  from { opacity: 0; transform: translateY(20px); }\n  to { opacity: 1; transform: translateY(0); }\n}\n\n@keyframes scaleIn {\n  from { opacity: 0; transform: scale(0.9); }\n  to { opacity: 1; transform: scale(1); }\n}\n\n@keyframes slideInLeft {\n  from { opacity: 0; transform: translateX(-50px); }\n  to { opacity: 1; transform: translateX(0); }\n}\n\n@keyframes slideInRight {\n  from { opacity: 0; transform: translateX(50px); }\n  to { opacity: 1; transform: translateX(0); }\n}\n\n@keyframes float {\n  0%, 100% { transform: translateY(0px); }\n  50% { transform: translateY(-10px); }\n}\n\n@keyframes bounce {\n  0%, 20%, 53%, 80%, 100% { transform: translateY(0); }\n  40%, 43% { transform: translateY(-10px); }\n  70% { transform: translateY(-5px); }\n  90% { transform: translateY(-2px); }\n}\n\n@keyframes pulse {\n  0%, 100% { opacity: 1; }\n  50% { opacity: 0.7; }\n}\n\n@keyframes shimmer {\n  0% { background-position: -468px 0; }\n  100% { background-position: 468px 0; }\n}\n\n@keyframes gradient {\n  0% { background-position: 0% 50%; }\n  50% { background-position: 100% 50%; }\n  100% { background-position: 0% 50%; }\n}\n\n.animate-fadeIn {\n  animation: fadeIn 0.8s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.animate-slideUp {\n  animation: slideUp 0.6s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.animate-scaleIn {\n  animation: scaleIn 0.5s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.animate-slideInLeft {\n  animation: slideInLeft 0.8s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.animate-slideInRight {\n  animation: slideInRight 0.8s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.animate-float {\n  animation: float 6s ease-in-out infinite;\n}\n\n.animate-bounce-gentle {\n  animation: bounce 2s infinite;\n}\n\n.animate-pulse-slow {\n  animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n}\n\n.animate-shimmer {\n  animation: shimmer 1.5s ease-in-out infinite;\n}\n\n.animate-gradient {\n  animation: gradient 3s ease infinite;\n  background-size: 200% 200%;\n}\n\n/* Additional animations */\n@keyframes float {\n  0%, 100% {\n    transform: translateY(0px);\n  }\n  50% {\n    transform: translateY(-10px);\n  }\n}\n\n.animate-float {\n  animation: float 6s ease-in-out infinite;\n}\n\n@keyframes pulse-glow {\n  0%, 100% {\n    box-shadow: 0 0 20px rgba(59, 130, 246, 0.1);\n  }\n  50% {\n    box-shadow: 0 0 40px rgba(59, 130, 246, 0.2);\n  }\n}\n\n.animate-pulse-glow {\n  animation: pulse-glow 3s ease-in-out infinite;\n}\n\n@keyframes slide-in-up {\n  from {\n    opacity: 0;\n    transform: translateY(30px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n.animate-slide-in-up {\n  animation: slide-in-up 0.6s ease-out forwards;\n}\n\n/* Gradient text utilities */\n.text-gradient {\n  background: linear-gradient(135deg, #3b82f6, #8b5cf6);\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  background-clip: text;\n}\n\n/* Enhanced scrollbar styling */\n::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n}\n\n::-webkit-scrollbar-track {\n  background: hsl(210, 40%, 96%);\n  border-radius: 3px;\n}\n\n::-webkit-scrollbar-thumb {\n  background: hsl(215, 16%, 47%);\n  border-radius: 3px;\n  transition: background 0.2s ease;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: hsl(220, 100%, 60%);\n}\n\n.dark ::-webkit-scrollbar-track {\n  background: hsl(217, 33%, 18%);\n}\n\n.dark ::-webkit-scrollbar-thumb {\n  background: hsl(215, 20%, 65%);\n}\n\n.dark ::-webkit-scrollbar-thumb:hover {\n  background: hsl(220, 100%, 60%);\n}\n\n/* Focus styles */\n.focus-ring {\n  @apply focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2 focus:ring-offset-background;\n}\n\n/* Selection styles */\n::selection {\n  background-color: hsl(220, 100%, 60%, 0.2);\n  color: hsl(222, 84%, 5%);\n}\n\n.dark ::selection {\n  background-color: hsl(220, 100%, 60%, 0.3);\n  color: hsl(210, 40%, 98%);\n}\n\n/* Smooth scrolling */\nhtml {\n  scroll-behavior: smooth;\n}\n\n/* Custom scrollbar for webkit browsers */\n::-webkit-scrollbar {\n  width: 8px;\n}\n\n::-webkit-scrollbar-track {\n  background: #f1f5f9;\n}\n\n::-webkit-scrollbar-thumb {\n  background: #cbd5e1;\n  border-radius: 4px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: #94a3b8;\n}\n\n/* Professional filter animations */\n.filter-card-enter {\n  opacity: 0;\n  transform: translateY(-10px);\n}\n\n.filter-card-enter-active {\n  opacity: 1;\n  transform: translateY(0);\n  transition: opacity 300ms ease-out, transform 300ms ease-out;\n}\n\n/* Enhanced select styling */\n[data-radix-select-trigger] {\n  transition: all 0.2s ease-in-out;\n}\n\n[data-radix-select-trigger]:hover {\n  transform: translateY(-1px);\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n}\n\n/* Filter button hover effects */\n.filter-apply-btn {\n  transition: all 0.2s ease-in-out;\n}\n\n.filter-apply-btn:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 8px 25px rgba(59, 130, 246, 0.3);\n}\n\n/* Enhanced card animations */\n.card-hover-lift {\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.card-hover-lift:hover {\n  transform: translateY(-8px);\n  box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);\n}\n\n/* Glass morphism effects */\n.glass {\n  background: rgba(255, 255, 255, 0.1);\n  backdrop-filter: blur(10px);\n  border: 1px solid rgba(255, 255, 255, 0.2);\n}\n\n/* Enhanced focus states */\n.focus-enhanced:focus {\n  outline: none;\n  ring: 2px;\n  ring-color: rgb(59 130 246);\n  ring-offset: 2px;\n}\n\n/* Gradient text */\n.gradient-text {\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  background-clip: text;\n}\n\n/* Button hover effects */\n.btn-magnetic {\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.btn-magnetic:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);\n}\n\n/* Loading animations */\n@keyframes shimmer {\n  0% {\n    background-position: -200px 0;\n  }\n  100% {\n    background-position: calc(200px + 100%) 0;\n  }\n}\n\n.shimmer {\n  background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);\n  background-size: 200px 100%;\n  animation: shimmer 1.5s infinite;\n}","size_bytes":14709},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport { initLenis } from \"./lib/lenis\";\n\n// Initialize Lenis smooth scrolling\nconst lenis = initLenis();\n(window as any).lenis = lenis;\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":294},"client/src/components/booking-modal.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { X } from \"lucide-react\";\nimport type { Ride } from \"@shared/schema\";\n\ninterface BookingModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  ride: Ride | null;\n  onSubmit: (formData: any) => void;\n}\n\nexport default function BookingModal({ isOpen, onClose, ride, onSubmit }: BookingModalProps) {\n  const [step, setStep] = useState(1);\n  const [formData, setFormData] = useState({\n    pickupDate: \"\",\n    returnDate: \"\",\n    pickupLocation: \"\",\n    driverAge: \"\",\n    phoneNumber: \"\",\n  });\n\n  const calculateDays = () => {\n    if (!formData.pickupDate || !formData.returnDate) return 0;\n    const pickup = new Date(formData.pickupDate);\n    const returnDate = new Date(formData.returnDate);\n    const diffTime = returnDate.getTime() - pickup.getTime();\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    return Math.max(1, diffDays);\n  };\n\n  const calculateTotal = () => {\n    if (!ride) return 0;\n    const days = calculateDays();\n    const dailyRate = parseFloat(ride.pricePerDay);\n    const insurance = 15; // per day\n    return (dailyRate + insurance) * days;\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    onSubmit({ ...formData, rideId: ride?.id, totalAmount: calculateTotal() });\n  };\n\n  if (!ride) return null;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl max-h-screen overflow-y-auto\">\n        <DialogHeader>\n          <div className=\"flex justify-between items-center\">\n            <DialogTitle>Complete Your Booking</DialogTitle>\n            <Button variant=\"ghost\" size=\"sm\" onClick={onClose}>\n              <X className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </DialogHeader>\n\n        <div className=\"p-6\">\n          {/* Progress Indicator */}\n          <div className=\"mb-8\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center\">\n                <div className={`w-8 h-8 ${step >= 1 ? 'bg-primary text-white' : 'bg-slate-200 text-slate-600'} rounded-full flex items-center justify-center text-sm font-medium`}>\n                  1\n                </div>\n                <span className={`ml-2 text-sm font-medium ${step >= 1 ? 'text-primary' : 'text-slate-600'}`}>\n                  Details\n                </span>\n              </div>\n              <div className=\"flex-1 h-1 bg-slate-200 mx-4\">\n                <div className={`h-1 bg-primary transition-all duration-300 ${step >= 2 ? 'w-2/3' : step >= 1 ? 'w-1/3' : 'w-0'}`}></div>\n              </div>\n              <div className=\"flex items-center\">\n                <div className={`w-8 h-8 ${step >= 2 ? 'bg-primary text-white' : 'bg-slate-200 text-slate-600'} rounded-full flex items-center justify-center text-sm font-medium`}>\n                  2\n                </div>\n                <span className={`ml-2 text-sm ${step >= 2 ? 'text-primary font-medium' : 'text-slate-600'}`}>\n                  Payment\n                </span>\n              </div>\n              <div className=\"flex-1 h-1 bg-slate-200 mx-4\"></div>\n              <div className=\"flex items-center\">\n                <div className={`w-8 h-8 ${step >= 3 ? 'bg-primary text-white' : 'bg-slate-200 text-slate-600'} rounded-full flex items-center justify-center text-sm font-medium`}>\n                  3\n                </div>\n                <span className={`ml-2 text-sm ${step >= 3 ? 'text-primary font-medium' : 'text-slate-600'}`}>\n                  Confirm\n                </span>\n              </div>\n            </div>\n          </div>\n\n          {/* Booking Form */}\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            <div className=\"grid md:grid-cols-2 gap-6\">\n              <div>\n                <Label htmlFor=\"pickupDate\">Pickup Date</Label>\n                <Input\n                  id=\"pickupDate\"\n                  type=\"date\"\n                  required\n                  value={formData.pickupDate}\n                  onChange={(e) => setFormData({ ...formData, pickupDate: e.target.value })}\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"returnDate\">Return Date</Label>\n                <Input\n                  id=\"returnDate\"\n                  type=\"date\"\n                  required\n                  value={formData.returnDate}\n                  onChange={(e) => setFormData({ ...formData, returnDate: e.target.value })}\n                />\n              </div>\n            </div>\n\n            <div>\n              <Label htmlFor=\"pickupLocation\">Pickup Location</Label>\n              <Input\n                id=\"pickupLocation\"\n                type=\"text\"\n                placeholder=\"Enter pickup address\"\n                required\n                value={formData.pickupLocation}\n                onChange={(e) => setFormData({ ...formData, pickupLocation: e.target.value })}\n              />\n            </div>\n\n            <div className=\"grid md:grid-cols-2 gap-6\">\n              <div>\n                <Label htmlFor=\"driverAge\">Driver Age</Label>\n                <Select \n                  required\n                  value={formData.driverAge}\n                  onValueChange={(value) => setFormData({ ...formData, driverAge: value })}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select age range\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"21-25\">21-25 years</SelectItem>\n                    <SelectItem value=\"26-35\">26-35 years</SelectItem>\n                    <SelectItem value=\"36-65\">36-65 years</SelectItem>\n                    <SelectItem value=\"65+\">65+ years</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div>\n                <Label htmlFor=\"phoneNumber\">Phone Number</Label>\n                <Input\n                  id=\"phoneNumber\"\n                  type=\"tel\"\n                  placeholder=\"+1 (555) 123-4567\"\n                  required\n                  value={formData.phoneNumber}\n                  onChange={(e) => setFormData({ ...formData, phoneNumber: e.target.value })}\n                />\n              </div>\n            </div>\n\n            {/* Booking Summary */}\n            <div className=\"bg-slate-50 rounded-lg p-4 space-y-3\">\n              <h3 className=\"font-semibold text-slate-800\">Booking Summary</h3>\n              <div className=\"flex justify-between text-sm\">\n                <span className=\"text-slate-600\">Vehicle:</span>\n                <span>{ride.model}</span>\n              </div>\n              <div className=\"flex justify-between text-sm\">\n                <span className=\"text-slate-600\">Daily Rate:</span>\n                <span>${ride.pricePerDay}/day</span>\n              </div>\n              <div className=\"flex justify-between text-sm\">\n                <span className=\"text-slate-600\">Duration:</span>\n                <span>{calculateDays()} days</span>\n              </div>\n              <div className=\"flex justify-between text-sm\">\n                <span className=\"text-slate-600\">Insurance:</span>\n                <span>$15/day</span>\n              </div>\n              <Separator />\n              <div className=\"flex justify-between font-semibold\">\n                <span>Total:</span>\n                <span>${calculateTotal()}</span>\n              </div>\n            </div>\n\n            <div className=\"flex space-x-4\">\n              <Button type=\"button\" variant=\"outline\" className=\"flex-1\" onClick={onClose}>\n                Cancel\n              </Button>\n              <Button type=\"submit\" className=\"flex-1\">\n                Proceed to Payment\n              </Button>\n            </div>\n          </form>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":8276},"client/src/components/featured-rides.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport RideCard from \"./ride-card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { ArrowRight } from \"lucide-react\";\nimport type { Ride } from \"@shared/schema\";\n\nexport default function FeaturedRides() {\n  const [, navigate] = useLocation();\n\n  const { data: rides, isLoading } = useQuery<Ride[]>({\n    queryKey: [\"/api/rides\"],\n  });\n\n  // Show first 3 rides as featured\n  const featuredRides = rides?.slice(0, 3) || [];\n\n  return (\n    <section className=\"py-24 bg-slate-50\">\n      <div className=\"container mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-16\">\n          <div className=\"inline-flex items-center gap-2 px-4 py-2 bg-primary/10 text-primary rounded-full text-sm font-semibold mb-6 border border-primary/10\">\n            Featured Collection\n          </div>\n          <h2 className=\"text-4xl lg:text-5xl font-bold text-slate-900 mb-6 font-display\">Premium Vehicles</h2>\n          <p className=\"text-xl text-slate-600 max-w-3xl mx-auto leading-relaxed\">\n            Discover our most popular vehicles, carefully selected for comfort, reliability, and exceptional style.\n          </p>\n        </div>\n\n        {/* Featured Rides Grid */}\n        {isLoading ? (\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {[1, 2, 3].map((i) => (\n              <div key={i} className=\"bg-white rounded-2xl shadow-lg p-6 border border-slate-200/60\">\n                <Skeleton className=\"w-full h-48 mb-6 rounded-xl\" />\n                <div className=\"space-y-4\">\n                  <div className=\"flex justify-between\">\n                    <div className=\"space-y-2\">\n                      <Skeleton className=\"h-6 w-32\" />\n                      <Skeleton className=\"h-4 w-24\" />\n                    </div>\n                    <div className=\"text-right space-y-2\">\n                      <Skeleton className=\"h-6 w-16\" />\n                      <Skeleton className=\"h-4 w-12\" />\n                    </div>\n                  </div>\n                  <div className=\"flex justify-between items-center pt-4\">\n                    <Skeleton className=\"h-4 w-28\" />\n                    <Skeleton className=\"h-10 w-24 rounded-xl\" />\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        ) : featuredRides.length > 0 ? (\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {featuredRides.map((ride) => (\n              <RideCard key={ride.id} ride={ride} />\n            ))}\n          </div>\n        ) : (\n          <div className=\"text-center py-20\">\n            <div className=\"w-20 h-20 bg-slate-100 rounded-full flex items-center justify-center mx-auto mb-6\">\n              <div className=\"text-3xl text-slate-400\">🚗</div>\n            </div>\n            <h3 className=\"text-2xl font-bold text-slate-900 mb-3 font-display\">No vehicles available</h3>\n            <p className=\"text-slate-600 text-lg\">Check back later for our premium vehicle collection.</p>\n          </div>\n        )}\n\n        <div className=\"text-center mt-16\">\n          <Button\n            size=\"lg\"\n            onClick={() => navigate(\"/rides\")}\n            className=\"bg-gradient-to-r from-primary to-primary/90 hover:from-primary/90 hover:to-primary text-white px-8 py-4 text-lg font-bold rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-105\"\n            data-testid=\"button-view-all-rides\"\n          >\n            Explore All Vehicles\n            <ArrowRight className=\"w-5 h-5 ml-2\" />\n          </Button>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":3744},"client/src/components/features-section.tsx":{"content":"\nimport { Shield, Clock, Smartphone, Star, Users, Award, CheckCircle, Zap, Heart, Globe } from \"lucide-react\";\nimport { motion } from \"framer-motion\";\n\nexport default function FeaturesSection() {\n  const features = [\n    {\n      icon: Shield,\n      title: \"Safety & Security\",\n      description: \"All drivers are thoroughly vetted with background checks, vehicle inspections, and real-time tracking for your peace of mind.\",\n      color: \"from-blue-500/10 to-blue-600/5\",\n      iconColor: \"text-blue-600\",\n    },\n    {\n      icon: Clock,\n      title: \"24/7 Availability\",\n      description: \"Round-the-clock premium service with instant booking and dedicated customer support whenever you need us.\",\n      color: \"from-purple-500/10 to-purple-600/5\",\n      iconColor: \"text-purple-600\",\n    },\n    {\n      icon: Smartphone,\n      title: \"Seamless Booking\",\n      description: \"Intuitive mobile-first design with one-tap booking, real-time updates, and effortless payment processing.\",\n      color: \"from-emerald-500/10 to-emerald-600/5\",\n      iconColor: \"text-emerald-600\",\n    },\n    {\n      icon: Star,\n      title: \"Premium Experience\",\n      description: \"Luxury vehicles maintained to the highest standards with professional drivers committed to exceptional service.\",\n      color: \"from-amber-500/10 to-amber-600/5\",\n      iconColor: \"text-amber-600\",\n    },\n    {\n      icon: Users,\n      title: \"Community Trust\",\n      description: \"Join thousands of satisfied customers who rely on our platform for safe, comfortable, and reliable transportation.\",\n      color: \"from-rose-500/10 to-rose-600/5\",\n      iconColor: \"text-rose-600\",\n    },\n    {\n      icon: Globe,\n      title: \"Wide Coverage\",\n      description: \"Extensive network covering major cities and suburbs with competitive pricing and transparent fare structure.\",\n      color: \"from-indigo-500/10 to-indigo-600/5\",\n      iconColor: \"text-indigo-600\",\n    },\n  ];\n\n  const containerVariants = {\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: {\n        staggerChildren: 0.1,\n        delayChildren: 0.2,\n      },\n    },\n  };\n\n  const itemVariants = {\n    hidden: { opacity: 0, y: 30 },\n    visible: {\n      opacity: 1,\n      y: 0,\n      transition: {\n        duration: 0.6,\n        ease: [0.21, 1.11, 0.81, 0.99],\n      },\n    },\n  };\n\n  return (\n    <section className=\"py-32 px-4 sm:px-6 lg:px-8 bg-white relative overflow-hidden\">\n      {/* Background decoration */}\n      <div className=\"absolute inset-0\">\n        <div className=\"absolute inset-0 bg-[linear-gradient(to_right,#8080800a_1px,transparent_1px),linear-gradient(to_bottom,#8080800a_1px,transparent_1px)] bg-[size:20px_20px]\"></div>\n      </div>\n      \n      <div className=\"max-w-7xl mx-auto relative z-10\">\n        <motion.div \n          className=\"text-center mb-20\"\n          initial={{ opacity: 0, y: 20 }}\n          whileInView={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.6 }}\n          viewport={{ once: true }}\n        >\n          <div className=\"inline-flex items-center gap-2 px-4 py-2 bg-primary/5 text-primary rounded-full text-sm font-semibold mb-6 border border-primary/10\">\n            <Zap className=\"w-4 h-4\" />\n            Why Choose RideShare Pro\n          </div>\n          \n          <h2 className=\"text-5xl md:text-6xl lg:text-7xl font-black text-slate-900 mb-8 font-display leading-tight\">\n            Built for Your\n            <span className=\"block bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent\">\n              Peace of Mind\n            </span>\n          </h2>\n          \n          <p className=\"text-xl md:text-2xl text-slate-600 max-w-4xl mx-auto leading-relaxed font-body\">\n            Experience the perfect blend of luxury, safety, and convenience with our premium rideshare platform designed around your needs.\n          </p>\n        </motion.div>\n\n        <motion.div \n          className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\"\n          variants={containerVariants}\n          initial=\"hidden\"\n          whileInView=\"visible\"\n          viewport={{ once: true, margin: \"-100px\" }}\n        >\n          {features.map((feature, index) => (\n            <motion.div \n              key={index}\n              variants={itemVariants}\n              className=\"group relative\"\n            >\n              <div className=\"h-full p-8 bg-white rounded-3xl border border-slate-200/60 shadow-sm hover:shadow-xl transition-all duration-500 hover:border-slate-300/60 hover:-translate-y-2\">\n                <div className={`w-16 h-16 bg-gradient-to-br ${feature.color} rounded-2xl flex items-center justify-center mb-6 group-hover:scale-110 transition-transform duration-300`}>\n                  <feature.icon className={`w-8 h-8 ${feature.iconColor}`} />\n                </div>\n                \n                <h3 className=\"text-2xl font-bold text-slate-900 mb-4 font-display group-hover:text-primary transition-colors duration-300\">\n                  {feature.title}\n                </h3>\n                \n                <p className=\"text-slate-600 leading-relaxed font-body text-lg\">\n                  {feature.description}\n                </p>\n\n                <div className=\"absolute inset-0 bg-gradient-to-br from-primary/[0.02] to-accent/[0.02] rounded-3xl opacity-0 group-hover:opacity-100 transition-opacity duration-500 pointer-events-none\"></div>\n              </div>\n            </motion.div>\n          ))}\n        </motion.div>\n\n        {/* Bottom CTA section */}\n        <motion.div \n          className=\"text-center mt-20\"\n          initial={{ opacity: 0, y: 20 }}\n          whileInView={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.6, delay: 0.4 }}\n          viewport={{ once: true }}\n        >\n          <div className=\"inline-flex items-center gap-8 p-8 bg-gradient-to-r from-slate-50 to-blue-50/50 rounded-3xl border border-slate-200/60\">\n            <div className=\"flex -space-x-2\">\n              <div className=\"w-12 h-12 bg-gradient-to-r from-primary to-primary/80 rounded-full border-3 border-white flex items-center justify-center shadow-lg\">\n                <CheckCircle className=\"w-6 h-6 text-white\" />\n              </div>\n              <div className=\"w-12 h-12 bg-gradient-to-r from-accent to-accent/80 rounded-full border-3 border-white flex items-center justify-center shadow-lg\">\n                <Heart className=\"w-6 h-6 text-white\" />\n              </div>\n              <div className=\"w-12 h-12 bg-gradient-to-r from-purple-500 to-purple-600 rounded-full border-3 border-white flex items-center justify-center shadow-lg\">\n                <Star className=\"w-6 h-6 text-white\" />\n              </div>\n            </div>\n            \n            <div className=\"text-left\">\n              <div className=\"text-2xl font-bold text-slate-900 font-display\">Join 50,000+ Happy Riders</div>\n              <div className=\"text-slate-600 font-semibold\">Experience premium transportation today</div>\n            </div>\n          </div>\n        </motion.div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":7067},"client/src/components/footer.tsx":{"content":"import { Car, MapPin, Phone, Mail } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport default function Footer() {\n  return (\n    <footer className=\"bg-slate-800 text-white py-12\">\n      <div className=\"container mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-8\">\n          <div>\n            <Link href=\"/\" className=\"flex items-center space-x-2 mb-6\">\n              <Car className=\"text-primary text-2xl\" />\n              <span className=\"text-xl font-bold\">RideShare Pro</span>\n            </Link>\n            <p className=\"text-slate-300 mb-4\">\n              Premium ride booking platform offering the best vehicles and customer experience.\n            </p>\n            <div className=\"flex space-x-4\">\n              <a \n                href=\"#\" \n                className=\"text-slate-300 hover:text-primary transition-colors\"\n                data-testid=\"link-facebook\"\n              >\n                <svg className=\"w-6 h-6\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path d=\"M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z\"/>\n                </svg>\n              </a>\n              <a \n                href=\"#\" \n                className=\"text-slate-300 hover:text-primary transition-colors\"\n                data-testid=\"link-twitter\"\n              >\n                <svg className=\"w-6 h-6\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path d=\"M23.953 4.57a10 10 0 01-2.825.775 4.958 4.958 0 002.163-2.723c-.951.555-2.005.959-3.127 1.184a4.92 4.92 0 00-8.384 4.482C7.69 8.095 4.067 6.13 1.64 3.162a4.822 4.822 0 00-.666 2.475c0 1.71.87 3.213 2.188 4.096a4.904 4.904 0 01-2.228-.616v.06a4.923 4.923 0 003.946 4.827 4.996 4.996 0 01-2.212.085 4.936 4.936 0 004.604 3.417 9.867 9.867 0 01-6.102 2.105c-.39 0-.779-.023-1.17-.067a13.995 13.995 0 007.557 2.209c9.053 0 13.998-7.496 13.998-13.985 0-.21 0-.42-.015-.63A9.935 9.935 0 0024 4.59z\"/>\n                </svg>\n              </a>\n              <a \n                href=\"#\" \n                className=\"text-slate-300 hover:text-primary transition-colors\"\n                data-testid=\"link-instagram\"\n              >\n                <svg className=\"w-6 h-6\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path d=\"M12.017 0C5.396 0 .029 5.367.029 11.987c0 6.62 5.367 11.987 11.988 11.987 6.62 0 11.987-5.367 11.987-11.987C24.014 5.367 18.637.001 12.017.001zM8.449 16.988c-1.297 0-2.448-.73-3.016-1.8-.568-1.07-.318-2.368.632-3.318.95-.95 2.248-1.2 3.318-.632 1.07.568 1.8 1.719 1.8 3.016 0 1.864-1.512 3.374-3.374 3.374v.36zm7.519 0c-1.297 0-2.448-.73-3.016-1.8-.568-1.07-.318-2.368.632-3.318.95-.95 2.248-1.2 3.318-.632 1.07.568 1.8 1.719 1.8 3.016 0 1.864-1.512 3.374-3.374 3.374v.36z\"/>\n                </svg>\n              </a>\n            </div>\n          </div>\n\n          <div>\n            <h4 className=\"text-lg font-semibold mb-6\">Quick Links</h4>\n            <ul className=\"space-y-3\">\n              <li>\n                <Link href=\"/rides\" className=\"text-slate-300 hover:text-primary transition-colors\" data-testid=\"link-browse-rides\">\n                  Browse Rides\n                </Link>\n              </li>\n              <li>\n                <a href=\"#about\" className=\"text-slate-300 hover:text-primary transition-colors\">\n                  How It Works\n                </a>\n              </li>\n              <li>\n                <a href=\"#pricing\" className=\"text-slate-300 hover:text-primary transition-colors\">\n                  Pricing\n                </a>\n              </li>\n              <li>\n                <a href=\"#locations\" className=\"text-slate-300 hover:text-primary transition-colors\">\n                  Locations\n                </a>\n              </li>\n            </ul>\n          </div>\n\n          <div>\n            <h4 className=\"text-lg font-semibold mb-6\">Support</h4>\n            <ul className=\"space-y-3\">\n              <li>\n                <a href=\"#help\" className=\"text-slate-300 hover:text-primary transition-colors\">\n                  Help Center\n                </a>\n              </li>\n              <li>\n                <a href=\"#contact\" className=\"text-slate-300 hover:text-primary transition-colors\">\n                  Contact Us\n                </a>\n              </li>\n              <li>\n                <a href=\"#terms\" className=\"text-slate-300 hover:text-primary transition-colors\">\n                  Terms of Service\n                </a>\n              </li>\n              <li>\n                <a href=\"#privacy\" className=\"text-slate-300 hover:text-primary transition-colors\">\n                  Privacy Policy\n                </a>\n              </li>\n            </ul>\n          </div>\n\n          <div>\n            <h4 className=\"text-lg font-semibold mb-6\">Contact Info</h4>\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center\">\n                <Phone className=\"w-5 h-5 mr-3 text-primary\" />\n                <span className=\"text-slate-300\" data-testid=\"text-phone\">+1 (555) 123-4567</span>\n              </div>\n              <div className=\"flex items-center\">\n                <Mail className=\"w-5 h-5 mr-3 text-primary\" />\n                <span className=\"text-slate-300\" data-testid=\"text-email\">support@ridesharepro.com</span>\n              </div>\n              <div className=\"flex items-center\">\n                <MapPin className=\"w-5 h-5 mr-3 text-primary\" />\n                <span className=\"text-slate-300\" data-testid=\"text-address\">123 Business Ave, NY 10001</span>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"border-t border-slate-700 mt-12 pt-8 text-center\">\n          <p className=\"text-slate-300\">\n            © 2023 RideShare Pro. All rights reserved.\n          </p>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":6078},"client/src/components/hero-section.tsx":{"content":"\nimport { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Search, Clock, MapPin, Calendar, ShieldCheck, Star, Users, Award, ArrowRight, CheckCircle, Zap } from \"lucide-react\";\nimport { motion } from \"framer-motion\";\n\nexport default function HeroSection() {\n  const [, navigate] = useLocation();\n  const [searchForm, setSearchForm] = useState({\n    location: \"\",\n    pickupDate: \"\",\n    returnDate: \"\",\n  });\n\n  const [isVisible, setIsVisible] = useState(false);\n\n  useEffect(() => {\n    setIsVisible(true);\n  }, []);\n\n  const handleSearch = (e: React.FormEvent) => {\n    e.preventDefault();\n    const params = new URLSearchParams();\n    if (searchForm.location) params.set('location', searchForm.location);\n    if (searchForm.pickupDate) params.set('pickupDate', searchForm.pickupDate);\n    if (searchForm.returnDate) params.set('returnDate', searchForm.returnDate);\n\n    navigate(`/rides?${params.toString()}`);\n  };\n\n  const containerVariants = {\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: {\n        staggerChildren: 0.1,\n        delayChildren: 0.2,\n      },\n    },\n  };\n\n  const itemVariants = {\n    hidden: { opacity: 0, y: 20 },\n    visible: {\n      opacity: 1,\n      y: 0,\n      transition: {\n        duration: 0.6,\n        ease: [0.21, 1.11, 0.81, 0.99],\n      },\n    },\n  };\n\n  return (\n    <section className=\"relative bg-gradient-to-br from-slate-50 via-blue-50/30 to-indigo-50/40 py-32 px-4 sm:px-6 lg:px-8 min-h-screen flex items-center overflow-hidden\">\n      {/* Enhanced Background decoration */}\n      <div className=\"absolute inset-0\">\n        <div className=\"absolute inset-0 bg-[linear-gradient(to_right,#80808012_1px,transparent_1px),linear-gradient(to_bottom,#80808012_1px,transparent_1px)] bg-[size:24px_24px]\"></div>\n        <div className=\"absolute top-0 left-0 right-0 h-px bg-gradient-to-r from-transparent via-slate-200 to-transparent\"></div>\n      </div>\n      \n      {/* Floating gradient orbs */}\n      <div className=\"absolute top-1/4 right-1/4 w-96 h-96 bg-gradient-to-r from-primary/5 to-accent/5 rounded-full blur-3xl animate-float\"></div>\n      <div className=\"absolute bottom-1/4 left-1/4 w-80 h-80 bg-gradient-to-r from-purple-400/5 to-pink-400/5 rounded-full blur-3xl animate-float\" style={{ animationDelay: '2s' }}></div>\n      \n      <div className=\"max-w-7xl mx-auto relative z-10\">\n        <motion.div \n          className=\"grid grid-cols-1 lg:grid-cols-2 gap-20 items-center\"\n          variants={containerVariants}\n          initial=\"hidden\"\n          animate=\"visible\"\n        >\n          {/* Left column - Content */}\n          <div className=\"space-y-12\">\n            <motion.div className=\"space-y-10\" variants={itemVariants}>\n              {/* Trust badge */}\n              <motion.div \n                className=\"inline-flex items-center gap-3 px-6 py-3 bg-white/80 backdrop-blur-sm border border-slate-200/60 rounded-full shadow-sm\"\n                variants={itemVariants}\n              >\n                <div className=\"flex -space-x-2\">\n                  <div className=\"w-6 h-6 bg-gradient-to-r from-primary to-primary/80 rounded-full border-2 border-white flex items-center justify-center\">\n                    <CheckCircle className=\"w-3 h-3 text-white\" />\n                  </div>\n                  <div className=\"w-6 h-6 bg-gradient-to-r from-accent to-accent/80 rounded-full border-2 border-white flex items-center justify-center\">\n                    <Zap className=\"w-3 h-3 text-white\" />\n                  </div>\n                </div>\n                <span className=\"text-sm font-semibold text-slate-700\">Trusted by 50,000+ riders</span>\n                <div className=\"flex items-center\">\n                  <Star className=\"w-4 h-4 text-yellow-400 fill-current\" />\n                  <span className=\"text-sm font-bold text-slate-800 ml-1\">4.9</span>\n                </div>\n              </motion.div>\n              \n              {/* Main heading */}\n              <motion.div className=\"space-y-6\" variants={itemVariants}>\n                <h1 className=\"font-display text-6xl md:text-7xl lg:text-8xl font-black leading-[0.95] text-balance\">\n                  <span className=\"block text-slate-900\">Premium</span>\n                  <span className=\"block bg-gradient-to-r from-primary via-blue-600 to-accent bg-clip-text text-transparent\">\n                    Rideshare\n                  </span>\n                  <span className=\"block text-slate-700 text-5xl md:text-6xl lg:text-7xl\">Experience</span>\n                </h1>\n                \n                <p className=\"text-xl md:text-2xl lg:text-3xl text-slate-600 max-w-2xl leading-relaxed font-body font-medium text-pretty\">\n                  Discover luxury vehicles and seamless rides. Book premium cars with verified drivers across your city.\n                </p>\n              </motion.div>\n\n              {/* Feature highlights */}\n              <motion.div className=\"flex flex-wrap gap-6\" variants={itemVariants}>\n                <div className=\"flex items-center gap-2 text-slate-600\">\n                  <CheckCircle className=\"w-5 h-5 text-accent\" />\n                  <span className=\"font-semibold\">Instant booking</span>\n                </div>\n                <div className=\"flex items-center gap-2 text-slate-600\">\n                  <CheckCircle className=\"w-5 h-5 text-accent\" />\n                  <span className=\"font-semibold\">Verified drivers</span>\n                </div>\n                <div className=\"flex items-center gap-2 text-slate-600\">\n                  <CheckCircle className=\"w-5 h-5 text-accent\" />\n                  <span className=\"font-semibold\">24/7 support</span>\n                </div>\n              </motion.div>\n\n              {/* Enhanced Stats */}\n              <motion.div className=\"grid grid-cols-3 gap-8 pt-4\" variants={itemVariants}>\n                <div className=\"text-center\">\n                  <div className=\"text-4xl lg:text-5xl font-black text-slate-900 font-display\">50K+</div>\n                  <div className=\"text-sm font-semibold text-slate-600 mt-1 uppercase tracking-wide\">Happy Customers</div>\n                </div>\n                \n                <div className=\"text-center\">\n                  <div className=\"text-4xl lg:text-5xl font-black text-slate-900 font-display\">4.9★</div>\n                  <div className=\"text-sm font-semibold text-slate-600 mt-1 uppercase tracking-wide\">Average Rating</div>\n                </div>\n                \n                <div className=\"text-center\">\n                  <div className=\"text-4xl lg:text-5xl font-black text-slate-900 font-display\">24/7</div>\n                  <div className=\"text-sm font-semibold text-slate-600 mt-1 uppercase tracking-wide\">Support</div>\n                </div>\n              </motion.div>\n            </motion.div>\n\n            {/* Enhanced Search Form */}\n            <motion.div variants={itemVariants}>\n              <Card className=\"w-full max-w-3xl shadow-2xl border-0 bg-white/95 backdrop-blur-sm rounded-3xl overflow-hidden\">\n                <CardContent className=\"p-10\">\n                  <div className=\"mb-8\">\n                    <h2 className=\"text-3xl font-bold text-slate-900 mb-3 font-display\">Find Your Perfect Ride</h2>\n                    <p className=\"text-slate-600 font-semibold text-lg\">Search and book premium vehicles in seconds</p>\n                  </div>\n                  \n                  <form onSubmit={handleSearch} className=\"space-y-8\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                      <div className=\"space-y-4\">\n                        <Label htmlFor=\"location\" className=\"text-sm font-bold text-slate-800 flex items-center uppercase tracking-wide\">\n                          <MapPin className=\"w-4 h-4 mr-2 text-primary\" />\n                          Location\n                        </Label>\n                        <Input\n                          id=\"location\"\n                          placeholder=\"Enter pickup location\"\n                          value={searchForm.location}\n                          onChange={(e) => setSearchForm({ ...searchForm, location: e.target.value })}\n                          className=\"h-16 border-slate-200 focus:border-primary focus:ring-primary/20 rounded-2xl transition-all duration-300 hover:shadow-md text-lg font-medium text-slate-900 bg-white/90\"\n                        />\n                      </div>\n\n                      <div className=\"space-y-4\">\n                        <Label htmlFor=\"pickupDate\" className=\"text-sm font-bold text-slate-800 flex items-center uppercase tracking-wide\">\n                          <Calendar className=\"w-4 h-4 mr-2 text-primary\" />\n                          Pickup Date\n                        </Label>\n                        <Input\n                          id=\"pickupDate\"\n                          type=\"date\"\n                          value={searchForm.pickupDate}\n                          onChange={(e) => setSearchForm({ ...searchForm, pickupDate: e.target.value })}\n                          className=\"h-16 border-slate-200 focus:border-primary focus:ring-primary/20 rounded-2xl transition-all duration-300 hover:shadow-md text-lg font-medium text-slate-900 bg-white/90\"\n                        />\n                      </div>\n\n                      <div className=\"space-y-4\">\n                        <Label htmlFor=\"returnDate\" className=\"text-sm font-bold text-slate-800 flex items-center uppercase tracking-wide\">\n                          <Calendar className=\"w-4 h-4 mr-2 text-primary\" />\n                          Return Date\n                        </Label>\n                        <Input\n                          id=\"returnDate\"\n                          type=\"date\"\n                          value={searchForm.returnDate}\n                          onChange={(e) => setSearchForm({ ...searchForm, returnDate: e.target.value })}\n                          className=\"h-16 border-slate-200 focus:border-primary focus:ring-primary/20 rounded-2xl transition-all duration-300 hover:shadow-md text-lg font-medium text-slate-900 bg-white/90\"\n                        />\n                      </div>\n                    </div>\n\n                    <Button\n                      type=\"submit\"\n                      size=\"lg\"\n                      className=\"w-full h-18 bg-gradient-to-r from-primary to-primary/90 hover:from-primary/90 hover:to-primary text-white font-bold text-xl rounded-2xl shadow-2xl transition-all duration-300 hover:scale-[1.02] hover:shadow-3xl border-0\"\n                    >\n                      <Search className=\"w-6 h-6 mr-3\" />\n                      Search Premium Rides\n                      <ArrowRight className=\"w-5 h-5 ml-2\" />\n                    </Button>\n                  </form>\n                </CardContent>\n              </Card>\n            </motion.div>\n          </div>\n\n          {/* Right column - Enhanced Image */}\n          <motion.div className=\"relative\" variants={itemVariants}>\n            <div className=\"relative\">\n              {/* Main image */}\n              <div className=\"relative overflow-hidden rounded-3xl shadow-2xl\">\n                <img \n                  src=\"https://images.unsplash.com/photo-1580273916550-e323be2ae537?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=1000&q=90\" \n                  alt=\"Luxury car interior with premium leather seats\" \n                  className=\"w-full h-[600px] object-cover transition-transform duration-700 hover:scale-105\"\n                />\n                <div className=\"absolute inset-0 bg-gradient-to-t from-black/20 via-transparent to-transparent\"></div>\n              </div>\n              \n              {/* Floating overlay cards */}\n              <motion.div \n                className=\"absolute -top-6 -left-6 bg-white/95 backdrop-blur-sm rounded-2xl shadow-xl p-6 border border-white/50 hidden lg:block max-w-xs\"\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ delay: 0.8, duration: 0.6 }}\n              >\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"p-3 bg-gradient-to-r from-accent/10 to-accent/5 rounded-xl\">\n                    <ShieldCheck className=\"w-7 h-7 text-accent\" />\n                  </div>\n                  <div>\n                    <h3 className=\"text-lg font-bold text-slate-900 font-display\">Safety First</h3>\n                    <p className=\"text-sm text-slate-600 font-semibold\">Verified & insured drivers</p>\n                  </div>\n                </div>\n              </motion.div>\n\n              <motion.div \n                className=\"absolute -bottom-6 -right-6 bg-white/95 backdrop-blur-sm rounded-2xl shadow-xl p-6 border border-white/50 hidden lg:block max-w-xs\"\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ delay: 1.2, duration: 0.6 }}\n              >\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"p-3 bg-gradient-to-r from-primary/10 to-primary/5 rounded-xl\">\n                    <Clock className=\"w-7 h-7 text-primary\" />\n                  </div>\n                  <div>\n                    <h3 className=\"text-lg font-bold text-slate-900 font-display\">Always On Time</h3>\n                    <p className=\"text-sm text-slate-600 font-semibold\">Punctual & reliable service</p>\n                  </div>\n                </div>\n              </motion.div>\n\n              {/* Background decoration */}\n              <div className=\"absolute -z-10 top-8 right-8 w-full h-full bg-gradient-to-br from-primary/5 to-accent/5 rounded-3xl\"></div>\n            </div>\n          </motion.div>\n        </motion.div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":14057},"client/src/components/navigation.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { \n  DropdownMenu, \n  DropdownMenuContent, \n  DropdownMenuItem, \n  DropdownMenuTrigger \n} from \"@/components/ui/dropdown-menu\";\nimport { Car, Menu, User, Settings, LogOut, BarChart } from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\n\nexport default function Navigation() {\n  const { user, isAuthenticated } = useAuth();\n  const [location] = useLocation();\n\n  const getUserInitials = (firstName?: string, lastName?: string) => {\n    const first = firstName?.charAt(0) || '';\n    const last = lastName?.charAt(0) || '';\n    return (first + last).toUpperCase() || 'U';\n  };\n\n  return (\n    <header className=\"bg-white shadow-sm sticky top-0 z-50\">\n      <div className=\"container mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          <Link href=\"/\" className=\"flex items-center space-x-2\">\n            <Car className=\"text-primary text-2xl\" />\n            <span className=\"text-xl font-bold text-slate-800\">RideShare Pro</span>\n          </Link>\n          \n          <nav className=\"hidden md:flex space-x-8\">\n            <Link \n              href=\"/\" \n              className={`transition-colors ${location === '/' ? 'text-primary' : 'text-slate-600 hover:text-primary'}`}\n            >\n              Home\n            </Link>\n            <Link \n              href=\"/rides\" \n              className={`transition-colors ${location === '/rides' ? 'text-primary' : 'text-slate-600 hover:text-primary'}`}\n            >\n              Browse Rides\n            </Link>\n            <Link \n              href=\"/about\" \n              className={`transition-colors ${location === '/about' ? 'text-primary' : 'text-slate-600 hover:text-primary'}`}\n            >\n              About\n            </Link>\n            <Link \n              href=\"/contact\" \n              className={`transition-colors ${location === '/contact' ? 'text-primary' : 'text-slate-600 hover:text-primary'}`}\n            >\n              Contact\n            </Link>\n          </nav>\n\n          <div className=\"flex items-center space-x-4\">\n            {isAuthenticated && user ? (\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button variant=\"ghost\" className=\"flex items-center space-x-2\" data-testid=\"button-user-menu\">\n                    <Avatar className=\"w-8 h-8\">\n                      <AvatarImage src={user.profileImageUrl} />\n                      <AvatarFallback className=\"bg-primary text-white text-sm\">\n                        {getUserInitials(user.firstName, user.lastName)}\n                      </AvatarFallback>\n                    </Avatar>\n                    <span className=\"hidden sm:block\">\n                      {user.firstName || user.email?.split('@')[0] || 'User'}\n                    </span>\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent align=\"end\" className=\"w-48\">\n                  <DropdownMenuItem asChild>\n                    <Link href=\"/dashboard\" className=\"flex items-center\" data-testid=\"link-dashboard\">\n                      <User className=\"w-4 h-4 mr-2\" />\n                      Dashboard\n                    </Link>\n                  </DropdownMenuItem>\n                  {user.isAdmin && (\n                    <DropdownMenuItem asChild>\n                      <Link href=\"/admin\" className=\"flex items-center\" data-testid=\"link-admin\">\n                        <BarChart className=\"w-4 h-4 mr-2\" />\n                        Admin Panel\n                      </Link>\n                    </DropdownMenuItem>\n                  )}\n                  <DropdownMenuItem className=\"flex items-center\">\n                    <Settings className=\"w-4 h-4 mr-2\" />\n                    Settings\n                  </DropdownMenuItem>\n                  <DropdownMenuItem \n                    onClick={() => window.location.href = \"/api/logout\"}\n                    className=\"flex items-center text-red-600\"\n                    data-testid=\"link-logout\"\n                  >\n                    <LogOut className=\"w-4 h-4 mr-2\" />\n                    Logout\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            ) : (\n              <>\n                <Button\n                  variant=\"ghost\"\n                  onClick={() => window.location.href = \"/api/login\"}\n                  className=\"hidden sm:block\"\n                  data-testid=\"button-sign-in\"\n                >\n                  Sign In\n                </Button>\n                <Button\n                  onClick={() => window.location.href = \"/api/login\"}\n                  data-testid=\"button-sign-up\"\n                >\n                  Sign Up\n                </Button>\n              </>\n            )}\n            \n            <Button variant=\"ghost\" size=\"sm\" className=\"md:hidden\">\n              <Menu className=\"w-5 h-5\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":5180},"client/src/components/ride-card.tsx":{"content":"\nimport { useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Users, Cog, Fuel, Star, MapPin, Clock, Shield } from \"lucide-react\";\nimport { motion } from \"framer-motion\";\nimport BookingModal from \"@/components/booking-modal\";\nimport type { Ride } from \"@shared/schema\";\n\ninterface RideCardProps {\n  ride: Ride;\n}\n\nexport default function RideCard({ ride }: RideCardProps) {\n  const { isAuthenticated } = useAuth();\n  const [, navigate] = useLocation();\n  const [showBookingModal, setShowBookingModal] = useState(false);\n\n  const handleBookNow = () => {\n    if (!isAuthenticated) {\n      window.location.href = \"/api/login\";\n      return;\n    }\n    setShowBookingModal(true);\n  };\n\n  const handleBookingSubmit = (formData: any) => {\n    // Navigate to the booking page with the form data\n    navigate(`/booking/${ride.id}`);\n    setShowBookingModal(false);\n  };\n\n  const renderStars = (rating: string) => {\n    const numRating = parseFloat(rating);\n    const stars = [];\n    for (let i = 1; i <= 5; i++) {\n      stars.push(\n        <Star \n          key={i}\n          className={`w-4 h-4 ${i <= numRating ? 'text-amber-400 fill-amber-400' : 'text-slate-300'}`}\n        />\n      );\n    }\n    return stars;\n  };\n\n  const getCategoryColor = (category: string) => {\n    const colors = {\n      luxury: \"bg-gradient-to-r from-purple-600 to-purple-700\",\n      economy: \"bg-gradient-to-r from-green-600 to-green-700\",\n      suv: \"bg-gradient-to-r from-blue-600 to-blue-700\",\n      sedan: \"bg-gradient-to-r from-slate-600 to-slate-700\",\n      sports: \"bg-gradient-to-r from-red-600 to-red-700\",\n    };\n    return colors[category.toLowerCase() as keyof typeof colors] || \"bg-gradient-to-r from-slate-600 to-slate-700\";\n  };\n\n  return (\n    <>\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.5 }}\n        whileHover={{ y: -8 }}\n        className=\"group\"\n      >\n        <Card \n          variant=\"elevated\" \n          className=\"overflow-hidden bg-white border border-slate-200/60 shadow-lg hover:shadow-2xl transition-all duration-500 hover:border-slate-300/60 rounded-2xl\"\n          data-testid={`card-ride-${ride.id}`}\n        >\n          {/* Image Container */}\n          <div className=\"relative overflow-hidden\">\n            <div className=\"aspect-[4/3] overflow-hidden\">\n              <img \n                src={ride.imageUrl} \n                alt={`${ride.model} for ride booking`} \n                className=\"w-full h-full object-cover transition-transform duration-700 group-hover:scale-110\"\n              />\n            </div>\n\n            {/* Overlay gradients */}\n            <div className=\"absolute inset-0 bg-gradient-to-t from-black/60 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300\" />\n\n            {/* Category badge */}\n            <div className=\"absolute top-4 left-4\">\n              <Badge className={`${getCategoryColor(ride.category)} text-white border-0 px-3 py-1 text-sm font-semibold shadow-lg`}>\n                {ride.category}\n              </Badge>\n            </div>\n\n            {/* Premium indicator */}\n            <div className=\"absolute top-4 right-4\">\n              <div className=\"bg-white/95 backdrop-blur-sm rounded-full p-2 shadow-lg\">\n                <Shield className=\"w-4 h-4 text-emerald-600\" />\n              </div>\n            </div>\n          </div>\n\n          <CardContent className=\"p-8\">\n            {/* Header Section */}\n            <div className=\"flex justify-between items-start mb-6\">\n              <div className=\"flex-1\">\n                <h3 className=\"text-2xl font-bold text-slate-900 mb-2 font-display group-hover:text-primary transition-colors duration-300\">\n                  {ride.model}\n                </h3>\n                <p className=\"text-slate-600 font-semibold\">\n                  {ride.year} • {ride.category}\n                </p>\n              </div>\n              <div className=\"text-right\">\n                <div className=\"text-3xl font-black text-primary font-display\">\n                  ${ride.pricePerDay}\n                </div>\n                <div className=\"text-slate-500 font-semibold\">per day</div>\n              </div>\n            </div>\n\n            {/* Features Grid */}\n            <div className=\"grid grid-cols-3 gap-3 mb-6\">\n              <div className=\"flex items-center gap-2 p-3 bg-slate-50 rounded-xl transition-colors hover:bg-slate-100\" data-testid={`text-seats-${ride.id}`}>\n                <div className=\"w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center\">\n                  <Users className=\"w-4 h-4 text-blue-600\" />\n                </div>\n                <div>\n                  <div className=\"text-xs text-slate-500 font-medium\">Seats</div>\n                  <div className=\"text-sm font-semibold text-slate-900\">{ride.seats}</div>\n                </div>\n              </div>\n\n              <div className=\"flex items-center gap-2 p-3 bg-slate-50 rounded-xl transition-colors hover:bg-slate-100\" data-testid={`text-transmission-${ride.id}`}>\n                <div className=\"w-8 h-8 bg-purple-100 rounded-lg flex items-center justify-center\">\n                  <Cog className=\"w-4 h-4 text-purple-600\" />\n                </div>\n                <div>\n                  <div className=\"text-xs text-slate-500 font-medium\">Trans</div>\n                  <div className=\"text-sm font-semibold text-slate-900\">{ride.transmission}</div>\n                </div>\n              </div>\n\n              <div className=\"flex items-center gap-2 p-3 bg-slate-50 rounded-xl transition-colors hover:bg-slate-100\" data-testid={`text-fuel-${ride.id}`}>\n                <div className=\"w-8 h-8 bg-emerald-100 rounded-lg flex items-center justify-center\">\n                  <Fuel className=\"w-4 h-4 text-emerald-600\" />\n                </div>\n                <div>\n                  <div className=\"text-xs text-slate-500 font-medium\">Fuel</div>\n                  <div className=\"text-sm font-semibold text-slate-900\">{ride.fuelType}</div>\n                </div>\n              </div>\n            </div>\n\n            {/* Rating and Location */}\n            <div className=\"flex items-center justify-between mb-6\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"flex items-center gap-1\">\n                  {renderStars(ride.rating || \"0\")}\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <span className=\"text-lg font-bold text-slate-900\" data-testid={`text-rating-${ride.id}`}>\n                    {ride.rating}\n                  </span>\n                  <span className=\"text-sm text-slate-500\">\n                    ({ride.reviewCount || 0} reviews)\n                  </span>\n                </div>\n              </div>\n\n              <div className=\"flex items-center gap-2 text-emerald-600\">\n                <Clock className=\"w-4 h-4\" />\n                <span className=\"text-sm font-semibold\">Available now</span>\n              </div>\n            </div>\n\n            {/* Location */}\n            <div className=\"flex items-center gap-2 text-slate-600 mb-6\">\n              <MapPin className=\"w-4 h-4\" />\n              <span className=\"text-sm font-medium\">{ride.location}</span>\n            </div>\n\n            {/* Action Button */}\n            <Button \n              onClick={handleBookNow}\n              className=\"w-full h-12 bg-gradient-to-r from-primary to-accent hover:from-primary/90 hover:to-accent/90 text-white font-bold text-lg rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-[1.02]\"\n              data-testid={`button-book-${ride.id}`}\n            >\n              <span>Book Now</span>\n              <div className=\"ml-2 opacity-0 group-hover:opacity-100 transition-opacity duration-300\">\n                →\n              </div>\n            </Button>\n          </CardContent>\n        </Card>\n      </motion.div>\n\n      {/* Booking Modal */}\n      <BookingModal\n        isOpen={showBookingModal}\n        onClose={() => setShowBookingModal(false)}\n        ride={ride}\n        onSubmit={handleBookingSubmit}\n      />\n    </>\n  );\n}\n","size_bytes":8415},"client/src/components/search-filters.tsx":{"content":"\nimport { useState } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Search, Filter, X, MapPin, Calendar, DollarSign, Users, Fuel, Settings } from \"lucide-react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\n\ninterface SearchFiltersProps {\n  onSearch: (filters: any) => void;\n}\n\nexport default function SearchFilters({ onSearch }: SearchFiltersProps) {\n  const [filters, setFilters] = useState({\n    location: \"\",\n    pickupDate: \"\",\n    returnDate: \"\",\n    vehicleType: \"\",\n    priceRange: [0, 500],\n    transmission: \"\",\n    fuelType: \"\",\n    seats: \"\"\n  });\n\n  const [showAdvanced, setShowAdvanced] = useState(false);\n  const [activeFilters, setActiveFilters] = useState<string[]>([]);\n\n  const handleFilterChange = (key: string, value: any) => {\n    const newFilters = { ...filters, [key]: value };\n    setFilters(newFilters);\n    \n    // Update active filters\n    const active = Object.entries(newFilters)\n      .filter(([k, v]) => {\n        if (k === 'priceRange') return v[0] !== 0 || v[1] !== 500;\n        return v !== \"\" && v !== null && v !== undefined;\n      })\n      .map(([k]) => k);\n    setActiveFilters(active);\n  };\n\n  const clearFilter = (key: string) => {\n    if (key === 'priceRange') {\n      handleFilterChange(key, [0, 500]);\n    } else {\n      handleFilterChange(key, \"\");\n    }\n  };\n\n  const clearAllFilters = () => {\n    const resetFilters = {\n      location: \"\",\n      pickupDate: \"\",\n      returnDate: \"\",\n      vehicleType: \"\",\n      priceRange: [0, 500],\n      transmission: \"\",\n      fuelType: \"\",\n      seats: \"\"\n    };\n    setFilters(resetFilters);\n    setActiveFilters([]);\n    onSearch(resetFilters);\n  };\n\n  const handleSearch = () => {\n    onSearch(filters);\n  };\n\n  const getFilterLabel = (key: string, value: any) => {\n    switch (key) {\n      case 'priceRange':\n        return `$${value[0]} - $${value[1]}`;\n      case 'vehicleType':\n        return value;\n      case 'transmission':\n        return value;\n      case 'fuelType':\n        return value;\n      case 'seats':\n        return `${value} seats`;\n      case 'location':\n        return value;\n      case 'pickupDate':\n        return `Pickup: ${new Date(value).toLocaleDateString()}`;\n      case 'returnDate':\n        return `Return: ${new Date(value).toLocaleDateString()}`;\n      default:\n        return value;\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Main Search Card */}\n      <Card className=\"bg-white/95 backdrop-blur-lg border-0 shadow-2xl rounded-2xl overflow-hidden\">\n        <CardContent className=\"p-8\">\n          <div className=\"flex items-center gap-3 mb-6\">\n            <div className=\"w-10 h-10 bg-gradient-to-r from-primary to-accent rounded-xl flex items-center justify-center\">\n              <Search className=\"w-5 h-5 text-white\" />\n            </div>\n            <h2 className=\"text-2xl font-bold text-slate-900 font-display\">Find Your Perfect Ride</h2>\n          </div>\n\n          {/* Primary Filters Row */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"location\" className=\"flex items-center gap-2 text-slate-700 font-semibold\">\n                <MapPin className=\"w-4 h-4\" />\n                Location\n              </Label>\n              <Input\n                id=\"location\"\n                type=\"text\"\n                placeholder=\"Enter city or airport\"\n                value={filters.location}\n                onChange={(e) => handleFilterChange(\"location\", e.target.value)}\n                className=\"h-12 border-slate-300 focus:border-primary focus:ring-primary/20 rounded-xl\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"pickupDate\" className=\"flex items-center gap-2 text-slate-700 font-semibold\">\n                <Calendar className=\"w-4 h-4\" />\n                Pickup Date\n              </Label>\n              <Input\n                id=\"pickupDate\"\n                type=\"date\"\n                value={filters.pickupDate}\n                onChange={(e) => handleFilterChange(\"pickupDate\", e.target.value)}\n                className=\"h-12 border-slate-300 focus:border-primary focus:ring-primary/20 rounded-xl\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"returnDate\" className=\"flex items-center gap-2 text-slate-700 font-semibold\">\n                <Calendar className=\"w-4 h-4\" />\n                Return Date\n              </Label>\n              <Input\n                id=\"returnDate\"\n                type=\"date\"\n                value={filters.returnDate}\n                onChange={(e) => handleFilterChange(\"returnDate\", e.target.value)}\n                className=\"h-12 border-slate-300 focus:border-primary focus:ring-primary/20 rounded-xl\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label className=\"flex items-center gap-2 text-slate-700 font-semibold\">\n                Vehicle Type\n              </Label>\n              <Select value={filters.vehicleType} onValueChange={(value) => handleFilterChange(\"vehicleType\", value)}>\n                <SelectTrigger className=\"h-12 border-slate-300 focus:border-primary focus:ring-primary/20 rounded-xl\">\n                  <SelectValue placeholder=\"Any Type\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"economy\">Economy</SelectItem>\n                  <SelectItem value=\"compact\">Compact</SelectItem>\n                  <SelectItem value=\"suv\">SUV</SelectItem>\n                  <SelectItem value=\"luxury\">Luxury</SelectItem>\n                  <SelectItem value=\"sports\">Sports</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          {/* Advanced Filters Toggle */}\n          <div className=\"flex items-center justify-between mb-4\">\n            <Button\n              variant=\"outline\"\n              onClick={() => setShowAdvanced(!showAdvanced)}\n              className=\"flex items-center gap-2 h-10 border-slate-300 hover:border-primary hover:bg-primary/5 rounded-xl\"\n            >\n              <Filter className=\"w-4 h-4\" />\n              Advanced Filters\n              <motion.div\n                animate={{ rotate: showAdvanced ? 180 : 0 }}\n                transition={{ duration: 0.2 }}\n              >\n                <X className=\"w-4 h-4\" />\n              </motion.div>\n            </Button>\n\n            {activeFilters.length > 0 && (\n              <Button\n                variant=\"ghost\"\n                onClick={clearAllFilters}\n                className=\"text-slate-600 hover:text-slate-800\"\n              >\n                Clear All ({activeFilters.length})\n              </Button>\n            )}\n          </div>\n\n          {/* Advanced Filters */}\n          <AnimatePresence>\n            {showAdvanced && (\n              <motion.div\n                initial={{ height: 0, opacity: 0 }}\n                animate={{ height: \"auto\", opacity: 1 }}\n                exit={{ height: 0, opacity: 0 }}\n                transition={{ duration: 0.3 }}\n                className=\"overflow-hidden\"\n              >\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6 pt-4 border-t border-slate-200\">\n                  <div className=\"space-y-3\">\n                    <Label className=\"flex items-center gap-2 text-slate-700 font-semibold\">\n                      <DollarSign className=\"w-4 h-4\" />\n                      Price Range (per day)\n                    </Label>\n                    <div className=\"px-3\">\n                      <Slider\n                        value={filters.priceRange}\n                        onValueChange={(value) => handleFilterChange(\"priceRange\", value)}\n                        max={500}\n                        min={0}\n                        step={10}\n                        className=\"w-full\"\n                      />\n                      <div className=\"flex justify-between text-sm text-slate-600 mt-2\">\n                        <span>${filters.priceRange[0]}</span>\n                        <span>${filters.priceRange[1]}</span>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label className=\"flex items-center gap-2 text-slate-700 font-semibold\">\n                      <Settings className=\"w-4 h-4\" />\n                      Transmission\n                    </Label>\n                    <Select value={filters.transmission} onValueChange={(value) => handleFilterChange(\"transmission\", value)}>\n                      <SelectTrigger className=\"h-12 border-slate-300 focus:border-primary focus:ring-primary/20 rounded-xl\">\n                        <SelectValue placeholder=\"Any Transmission\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"automatic\">Automatic</SelectItem>\n                        <SelectItem value=\"manual\">Manual</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label className=\"flex items-center gap-2 text-slate-700 font-semibold\">\n                      <Fuel className=\"w-4 h-4\" />\n                      Fuel Type\n                    </Label>\n                    <Select value={filters.fuelType} onValueChange={(value) => handleFilterChange(\"fuelType\", value)}>\n                      <SelectTrigger className=\"h-12 border-slate-300 focus:border-primary focus:ring-primary/20 rounded-xl\">\n                        <SelectValue placeholder=\"Any Fuel Type\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"petrol\">Petrol</SelectItem>\n                        <SelectItem value=\"diesel\">Diesel</SelectItem>\n                        <SelectItem value=\"electric\">Electric</SelectItem>\n                        <SelectItem value=\"hybrid\">Hybrid</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label className=\"flex items-center gap-2 text-slate-700 font-semibold\">\n                      <Users className=\"w-4 h-4\" />\n                      Seats\n                    </Label>\n                    <Select value={filters.seats} onValueChange={(value) => handleFilterChange(\"seats\", value)}>\n                      <SelectTrigger className=\"h-12 border-slate-300 focus:border-primary focus:ring-primary/20 rounded-xl\">\n                        <SelectValue placeholder=\"Any Seats\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"2\">2 Seats</SelectItem>\n                        <SelectItem value=\"4\">4 Seats</SelectItem>\n                        <SelectItem value=\"5\">5 Seats</SelectItem>\n                        <SelectItem value=\"7\">7 Seats</SelectItem>\n                        <SelectItem value=\"8\">8+ Seats</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n              </motion.div>\n            )}\n          </AnimatePresence>\n\n          {/* Active Filters */}\n          {activeFilters.length > 0 && (\n            <div className=\"flex flex-wrap gap-2 mb-6\">\n              {activeFilters.map((key) => (\n                <Badge\n                  key={key}\n                  variant=\"secondary\"\n                  className=\"flex items-center gap-2 px-3 py-1 bg-primary/10 text-primary border-primary/20 rounded-full\"\n                >\n                  {getFilterLabel(key, filters[key as keyof typeof filters])}\n                  <button\n                    onClick={() => clearFilter(key)}\n                    className=\"ml-1 hover:bg-primary/20 rounded-full p-0.5 transition-colors\"\n                  >\n                    <X className=\"w-3 h-3\" />\n                  </button>\n                </Badge>\n              ))}\n            </div>\n          )}\n\n          {/* Search Button */}\n          <Button\n            onClick={handleSearch}\n            className=\"w-full h-12 bg-gradient-to-r from-primary to-accent hover:from-primary/90 hover:to-accent/90 text-white font-bold text-lg rounded-xl shadow-lg hover:shadow-xl transition-all duration-300\"\n          >\n            <Search className=\"w-5 h-5 mr-2\" />\n            Search Vehicles\n          </Button>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":13027},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport type { User } from \"@shared/schema\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery<User>({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":307},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/admin-dashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport Navigation from \"@/components/navigation\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { \n  BarChart, \n  Users, \n  Car, \n  DollarSign, \n  Plus, \n  Edit, \n  Shield,\n  Calendar,\n  TrendingUp,\n  ToggleLeft,\n  ToggleRight\n} from \"lucide-react\";\nimport type { Ride, InsertRide, BookingWithDetails } from \"@shared/schema\";\n\nexport default function AdminDashboard() {\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const { toast } = useToast();\n  const [isAddRideOpen, setIsAddRideOpen] = useState(false);\n  const [editingRide, setEditingRide] = useState<Ride | null>(null);\n\n  // Redirect if not authenticated or not admin\n  useEffect(() => {\n    if (!isLoading && (!isAuthenticated || !user?.isAdmin)) {\n      toast({\n        title: \"Access Denied\",\n        description: \"Admin access required\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, user, toast]);\n\n  const { data: analytics, isLoading: analyticsLoading } = useQuery({\n    queryKey: [\"/api/analytics\"],\n    enabled: isAuthenticated && user?.isAdmin,\n    retry: false,\n  });\n\n  const { data: rides, isLoading: ridesLoading } = useQuery<Ride[]>({\n    queryKey: [\"/api/rides\"],\n    enabled: isAuthenticated && user?.isAdmin,\n  });\n\n  const { data: bookings, isLoading: bookingsLoading } = useQuery<BookingWithDetails[]>({\n    queryKey: [\"/api/bookings\"],\n    enabled: isAuthenticated && user?.isAdmin,\n  });\n\n  const [rideForm, setRideForm] = useState<InsertRide>({\n    model: \"\",\n    category: \"\",\n    imageUrl: \"\",\n    pricePerDay: \"0\",\n    seats: 4,\n    transmission: \"Automatic\",\n    fuelType: \"Gasoline\",\n    location: \"\",\n  });\n\n  const createRideMutation = useMutation({\n    mutationFn: async (rideData: InsertRide) => {\n      const response = await apiRequest(\"POST\", \"/api/rides\", rideData);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/rides\"] });\n      setIsAddRideOpen(false);\n      setRideForm({\n        model: \"\",\n        category: \"\",\n        imageUrl: \"\",\n        pricePerDay: \"0\",\n        seats: 4,\n        transmission: \"Automatic\",\n        fuelType: \"Gasoline\",\n        location: \"\",\n      });\n      toast({\n        title: \"Success\",\n        description: \"Ride added successfully\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"Admin access required\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to add ride\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateRideMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<InsertRide> }) => {\n      const response = await apiRequest(\"PUT\", `/api/rides/${id}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/rides\"] });\n      setEditingRide(null);\n      toast({\n        title: \"Success\",\n        description: \"Ride updated successfully\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"Admin access required\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update ride\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleAddRide = (e: React.FormEvent) => {\n    e.preventDefault();\n    createRideMutation.mutate(rideForm);\n  };\n\n  const handleToggleRideStatus = (ride: Ride) => {\n    updateRideMutation.mutate({\n      id: ride.id,\n      data: { available: !ride.available }\n    });\n  };\n\n  if (isLoading || analyticsLoading) {\n    return (\n      <div className=\"min-h-screen bg-slate-50\">\n        <Navigation />\n        <div className=\"container mx-auto px-4 py-16\">\n          <div className=\"animate-pulse\">\n            <div className=\"h-8 bg-slate-200 rounded mb-8\"></div>\n            <div className=\"grid sm:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n              {[1, 2, 3, 4].map((i) => (\n                <div key={i} className=\"h-24 bg-slate-200 rounded\"></div>\n              ))}\n            </div>\n            <div className=\"h-96 bg-slate-200 rounded\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated || !user?.isAdmin) {\n    return (\n      <div className=\"min-h-screen bg-slate-50\">\n        <Navigation />\n        <div className=\"container mx-auto px-4 py-16\">\n          <div className=\"text-center\">\n            <Shield className=\"w-16 h-16 text-slate-400 mx-auto mb-4\" />\n            <h1 className=\"text-2xl font-bold text-slate-800 mb-2\">Access Denied</h1>\n            <p className=\"text-slate-600\">Administrator access required to view this page.</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-slate-50\">\n      <Navigation />\n      \n      <div className=\"container mx-auto px-4 py-16\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"grid lg:grid-cols-4 gap-8\">\n            {/* Sidebar */}\n            <div className=\"lg:col-span-1\">\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"text-center mb-6\">\n                    <div className=\"w-20 h-20 bg-slate-700 rounded-full flex items-center justify-center mx-auto mb-4\">\n                      <Shield className=\"w-8 h-8 text-white\" />\n                    </div>\n                    <h3 className=\"font-semibold text-slate-800\">Admin Panel</h3>\n                    <p className=\"text-sm text-slate-600\">RideShare Pro</p>\n                  </div>\n                  \n                  <nav className=\"space-y-2\">\n                    <div className=\"flex items-center px-4 py-2 text-primary bg-blue-50 rounded-lg font-medium\">\n                      <BarChart className=\"w-4 h-4 mr-2\" />\n                      Analytics\n                    </div>\n                    <div className=\"flex items-center px-4 py-2 text-slate-600 hover:bg-slate-50 rounded-lg\">\n                      <Car className=\"w-4 h-4 mr-2\" />\n                      Manage Rides\n                    </div>\n                    <div className=\"flex items-center px-4 py-2 text-slate-600 hover:bg-slate-50 rounded-lg\">\n                      <Calendar className=\"w-4 h-4 mr-2\" />\n                      Bookings\n                    </div>\n                    <div className=\"flex items-center px-4 py-2 text-slate-600 hover:bg-slate-50 rounded-lg\">\n                      <Users className=\"w-4 h-4 mr-2\" />\n                      Users\n                    </div>\n                  </nav>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Main Content */}\n            <div className=\"lg:col-span-3\">\n              <div className=\"space-y-6\">\n                {/* Analytics Cards */}\n                <div className=\"grid sm:grid-cols-2 lg:grid-cols-4 gap-6\">\n                  <Card>\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-sm text-slate-600\">Total Bookings</p>\n                          <p className=\"text-2xl font-bold text-slate-800\" data-testid=\"text-total-bookings\">\n                            {analytics?.totalBookings || 0}\n                          </p>\n                        </div>\n                        <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n                          <Calendar className=\"w-6 h-6 text-primary\" />\n                        </div>\n                      </div>\n                      <div className=\"mt-2 text-sm text-green-600\">\n                        <TrendingUp className=\"w-4 h-4 inline mr-1\" />\n                        +12% from last month\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-sm text-slate-600\">Revenue</p>\n                          <p className=\"text-2xl font-bold text-slate-800\" data-testid=\"text-revenue\">\n                            ${analytics?.totalRevenue || '0'}\n                          </p>\n                        </div>\n                        <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center\">\n                          <DollarSign className=\"w-6 h-6 text-green-600\" />\n                        </div>\n                      </div>\n                      <div className=\"mt-2 text-sm text-green-600\">\n                        <TrendingUp className=\"w-4 h-4 inline mr-1\" />\n                        +8% from last month\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-sm text-slate-600\">Active Rides</p>\n                          <p className=\"text-2xl font-bold text-slate-800\" data-testid=\"text-active-rides\">\n                            {analytics?.activeRides || 0}\n                          </p>\n                        </div>\n                        <div className=\"w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center\">\n                          <Car className=\"w-6 h-6 text-purple-600\" />\n                        </div>\n                      </div>\n                      <div className=\"mt-2 text-sm text-slate-600\">\n                        85% utilization rate\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-sm text-slate-600\">Total Users</p>\n                          <p className=\"text-2xl font-bold text-slate-800\" data-testid=\"text-total-users\">\n                            {analytics?.totalUsers || 0}\n                          </p>\n                        </div>\n                        <div className=\"w-12 h-12 bg-orange-100 rounded-lg flex items-center justify-center\">\n                          <Users className=\"w-6 h-6 text-orange-600\" />\n                        </div>\n                      </div>\n                      <div className=\"mt-2 text-sm text-green-600\">\n                        <TrendingUp className=\"w-4 h-4 inline mr-1\" />\n                        +15% new users\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n\n                {/* Ride Management */}\n                <Card>\n                  <CardHeader>\n                    <div className=\"flex justify-between items-center\">\n                      <CardTitle>Ride Management</CardTitle>\n                      <Dialog open={isAddRideOpen} onOpenChange={setIsAddRideOpen}>\n                        <DialogTrigger asChild>\n                          <Button data-testid=\"button-add-ride\">\n                            <Plus className=\"w-4 h-4 mr-2\" />\n                            Add New Ride\n                          </Button>\n                        </DialogTrigger>\n                        <DialogContent className=\"max-w-md\">\n                          <DialogHeader>\n                            <DialogTitle>Add New Ride</DialogTitle>\n                          </DialogHeader>\n                          <form onSubmit={handleAddRide} className=\"space-y-4\">\n                            <div>\n                              <Label htmlFor=\"model\">Vehicle Model</Label>\n                              <Input\n                                id=\"model\"\n                                required\n                                value={rideForm.model}\n                                onChange={(e) => setRideForm({ ...rideForm, model: e.target.value })}\n                                data-testid=\"input-ride-model\"\n                              />\n                            </div>\n                            <div>\n                              <Label htmlFor=\"category\">Category</Label>\n                              <Select value={rideForm.category} onValueChange={(value) => setRideForm({ ...rideForm, category: value })}>\n                                <SelectTrigger data-testid=\"select-ride-category\">\n                                  <SelectValue placeholder=\"Select category\" />\n                                </SelectTrigger>\n                                <SelectContent>\n                                  <SelectItem value=\"Economy\">Economy</SelectItem>\n                                  <SelectItem value=\"Compact\">Compact</SelectItem>\n                                  <SelectItem value=\"SUV\">SUV</SelectItem>\n                                  <SelectItem value=\"Luxury\">Luxury</SelectItem>\n                                </SelectContent>\n                              </Select>\n                            </div>\n                            <div>\n                              <Label htmlFor=\"pricePerDay\">Price per Day ($)</Label>\n                              <Input\n                                id=\"pricePerDay\"\n                                type=\"number\"\n                                step=\"0.01\"\n                                required\n                                value={rideForm.pricePerDay}\n                                onChange={(e) => setRideForm({ ...rideForm, pricePerDay: e.target.value })}\n                                data-testid=\"input-ride-price\"\n                              />\n                            </div>\n                            <div>\n                              <Label htmlFor=\"imageUrl\">Image URL</Label>\n                              <Input\n                                id=\"imageUrl\"\n                                type=\"url\"\n                                required\n                                value={rideForm.imageUrl}\n                                onChange={(e) => setRideForm({ ...rideForm, imageUrl: e.target.value })}\n                                data-testid=\"input-ride-image\"\n                              />\n                            </div>\n                            <div>\n                              <Label htmlFor=\"location\">Location</Label>\n                              <Input\n                                id=\"location\"\n                                required\n                                value={rideForm.location}\n                                onChange={(e) => setRideForm({ ...rideForm, location: e.target.value })}\n                                data-testid=\"input-ride-location\"\n                              />\n                            </div>\n                            <Button type=\"submit\" className=\"w-full\" disabled={createRideMutation.isPending} data-testid=\"button-submit-ride\">\n                              {createRideMutation.isPending ? \"Adding...\" : \"Add Ride\"}\n                            </Button>\n                          </form>\n                        </DialogContent>\n                      </Dialog>\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    {ridesLoading ? (\n                      <div className=\"space-y-4\">\n                        {[1, 2, 3].map((i) => (\n                          <Skeleton key={i} className=\"h-16\" />\n                        ))}\n                      </div>\n                    ) : rides && rides.length > 0 ? (\n                      <div className=\"space-y-4\">\n                        {rides.map((ride) => (\n                          <div key={ride.id} className=\"border border-slate-200 rounded-lg p-4\" data-testid={`ride-item-${ride.id}`}>\n                            <div className=\"flex items-center justify-between\">\n                              <div className=\"flex items-center space-x-4\">\n                                <img\n                                  src={ride.imageUrl}\n                                  alt={`${ride.model} for admin management`}\n                                  className=\"w-16 h-12 object-cover rounded-lg\"\n                                />\n                                <div>\n                                  <h4 className=\"font-semibold text-slate-800\" data-testid={`ride-model-${ride.id}`}>\n                                    {ride.model}\n                                  </h4>\n                                  <p className=\"text-sm text-slate-600\" data-testid={`ride-category-${ride.id}`}>\n                                    {ride.category}\n                                  </p>\n                                </div>\n                              </div>\n                              \n                              <div className=\"flex items-center space-x-6\">\n                                <div className=\"text-center\">\n                                  <p className=\"text-sm text-slate-600\">Daily Rate</p>\n                                  <p className=\"font-semibold text-slate-800\" data-testid={`ride-price-${ride.id}`}>\n                                    ${ride.pricePerDay}\n                                  </p>\n                                </div>\n                                <div className=\"text-center\">\n                                  <p className=\"text-sm text-slate-600\">Status</p>\n                                  <Badge \n                                    className={ride.available ? \"bg-green-100 text-green-800\" : \"bg-red-100 text-red-800\"}\n                                    data-testid={`ride-status-${ride.id}`}\n                                  >\n                                    {ride.available ? \"Available\" : \"Disabled\"}\n                                  </Badge>\n                                </div>\n                                <div className=\"flex space-x-2\">\n                                  <Button\n                                    variant=\"outline\"\n                                    size=\"sm\"\n                                    onClick={() => setEditingRide(ride)}\n                                    data-testid={`button-edit-${ride.id}`}\n                                  >\n                                    <Edit className=\"w-4 h-4\" />\n                                  </Button>\n                                  <Button\n                                    variant=\"outline\"\n                                    size=\"sm\"\n                                    onClick={() => handleToggleRideStatus(ride)}\n                                    disabled={updateRideMutation.isPending}\n                                    data-testid={`button-toggle-${ride.id}`}\n                                  >\n                                    {ride.available ? (\n                                      <ToggleRight className=\"w-4 h-4 text-green-600\" />\n                                    ) : (\n                                      <ToggleLeft className=\"w-4 h-4 text-red-600\" />\n                                    )}\n                                  </Button>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    ) : (\n                      <div className=\"text-center py-8\">\n                        <Car className=\"w-12 h-12 text-slate-300 mx-auto mb-4\" />\n                        <p className=\"text-slate-600\">No rides available. Add your first ride to get started.</p>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":21097},"client/src/pages/booking.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation, useParams } from \"wouter\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport Navigation from \"@/components/navigation\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Calendar, MapPin, Users, Cog, Fuel, Star } from \"lucide-react\";\nimport type { Ride, InsertBooking } from \"@shared/schema\";\n\nexport default function Booking() {\n  const { rideId } = useParams();\n  const [, navigate] = useLocation();\n  const { isAuthenticated, isLoading: authLoading } = useAuth();\n  const { toast } = useToast();\n\n  const [formData, setFormData] = useState({\n    pickupDate: \"\",\n    returnDate: \"\",\n    pickupLocation: \"\",\n    driverAge: \"\",\n    phoneNumber: \"\",\n  });\n\n  // Redirect if not authenticated\n  useEffect(() => {\n    if (!authLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, authLoading, toast]);\n\n  const { data: ride, isLoading: rideLoading } = useQuery<Ride>({\n    queryKey: [\"/api/rides\", rideId],\n    enabled: !!rideId,\n  });\n\n  const bookingMutation = useMutation({\n    mutationFn: async (bookingData: InsertBooking) => {\n      const response = await apiRequest(\"POST\", \"/api/bookings\", bookingData);\n      return response.json();\n    },\n    onSuccess: (booking) => {\n      toast({\n        title: \"Booking Created\",\n        description: \"Proceeding to payment...\",\n      });\n      navigate(`/checkout/${booking.id}`);\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Booking Failed\",\n        description: error.message || \"Failed to create booking\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const calculateDays = () => {\n    if (!formData.pickupDate || !formData.returnDate) return 0;\n    const pickup = new Date(formData.pickupDate);\n    const returnDate = new Date(formData.returnDate);\n    const diffTime = returnDate.getTime() - pickup.getTime();\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    return Math.max(1, diffDays);\n  };\n\n  const calculateTotal = () => {\n    if (!ride) return 0;\n    const days = calculateDays();\n    const dailyRate = parseFloat(ride.pricePerDay);\n    const insurance = 15; // per day\n    return (dailyRate + insurance) * days;\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!ride) return;\n\n    const bookingData: InsertBooking = {\n      rideId: ride.id,\n      userId: \"\", // Will be set by the server\n      pickupDate: new Date(formData.pickupDate),\n      returnDate: new Date(formData.returnDate),\n      pickupLocation: formData.pickupLocation,\n      driverAge: formData.driverAge,\n      phoneNumber: formData.phoneNumber,\n      totalAmount: calculateTotal().toString(),\n    };\n\n    bookingMutation.mutate(bookingData);\n  };\n\n  if (authLoading || rideLoading) {\n    return (\n      <div className=\"min-h-screen bg-slate-50\">\n        <Navigation />\n        <div className=\"container mx-auto px-4 py-16\">\n          <div className=\"max-w-4xl mx-auto\">\n            <div className=\"animate-pulse\">\n              <div className=\"h-8 bg-slate-200 rounded mb-4\"></div>\n              <div className=\"grid lg:grid-cols-2 gap-8\">\n                <div className=\"space-y-4\">\n                  <div className=\"h-64 bg-slate-200 rounded\"></div>\n                  <div className=\"h-6 bg-slate-200 rounded\"></div>\n                  <div className=\"h-4 bg-slate-200 rounded w-2/3\"></div>\n                </div>\n                <div className=\"space-y-4\">\n                  <div className=\"h-10 bg-slate-200 rounded\"></div>\n                  <div className=\"h-10 bg-slate-200 rounded\"></div>\n                  <div className=\"h-10 bg-slate-200 rounded\"></div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!ride) {\n    return (\n      <div className=\"min-h-screen bg-slate-50\">\n        <Navigation />\n        <div className=\"container mx-auto px-4 py-16\">\n          <div className=\"text-center\">\n            <h1 className=\"text-2xl font-bold text-slate-800 mb-4\">Ride Not Found</h1>\n            <Button onClick={() => navigate(\"/rides\")}>Browse Rides</Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-slate-50\">\n      <Navigation />\n      \n      <div className=\"container mx-auto px-4 py-16\">\n        <div className=\"max-w-4xl mx-auto\">\n          <h1 className=\"text-3xl font-bold text-slate-800 mb-8\">Complete Your Booking</h1>\n\n          <div className=\"grid lg:grid-cols-2 gap-8\">\n            {/* Vehicle Details */}\n            <div>\n              <Card>\n                <CardContent className=\"p-6\">\n                  <img\n                    src={ride.imageUrl}\n                    alt={`${ride.model} for booking`}\n                    className=\"w-full h-64 object-cover rounded-lg mb-4\"\n                  />\n                  \n                  <h3 className=\"text-xl font-semibold text-slate-800 mb-2\">{ride.model}</h3>\n                  <p className=\"text-slate-600 mb-4\">{ride.category}</p>\n                  \n                  <div className=\"grid grid-cols-2 gap-4 text-sm text-slate-600 mb-6\">\n                    <div className=\"flex items-center\">\n                      <Users className=\"w-4 h-4 mr-2\" />\n                      {ride.seats} seats\n                    </div>\n                    <div className=\"flex items-center\">\n                      <Cog className=\"w-4 h-4 mr-2\" />\n                      {ride.transmission}\n                    </div>\n                    <div className=\"flex items-center\">\n                      <Fuel className=\"w-4 h-4 mr-2\" />\n                      {ride.fuelType}\n                    </div>\n                    <div className=\"flex items-center\">\n                      <Star className=\"w-4 h-4 mr-2 text-yellow-400 fill-current\" />\n                      {ride.rating} ({ride.reviewCount})\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center text-slate-600 mb-4\">\n                    <MapPin className=\"w-4 h-4 mr-2\" />\n                    {ride.location}\n                  </div>\n\n                  <div className=\"text-right\">\n                    <div className=\"text-2xl font-bold text-primary\">${ride.pricePerDay}</div>\n                    <div className=\"text-sm text-slate-600\">per day</div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Booking Form */}\n            <div>\n              <Card>\n                <CardContent className=\"p-6\">\n                  <form onSubmit={handleSubmit} className=\"space-y-6\">\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <Label htmlFor=\"pickupDate\">Pickup Date</Label>\n                        <Input\n                          id=\"pickupDate\"\n                          type=\"date\"\n                          required\n                          value={formData.pickupDate}\n                          onChange={(e) => setFormData({ ...formData, pickupDate: e.target.value })}\n                          data-testid=\"input-pickup-date\"\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"returnDate\">Return Date</Label>\n                        <Input\n                          id=\"returnDate\"\n                          type=\"date\"\n                          required\n                          value={formData.returnDate}\n                          onChange={(e) => setFormData({ ...formData, returnDate: e.target.value })}\n                          data-testid=\"input-return-date\"\n                        />\n                      </div>\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"pickupLocation\">Pickup Location</Label>\n                      <Input\n                        id=\"pickupLocation\"\n                        type=\"text\"\n                        placeholder=\"Enter pickup address\"\n                        required\n                        value={formData.pickupLocation}\n                        onChange={(e) => setFormData({ ...formData, pickupLocation: e.target.value })}\n                        data-testid=\"input-pickup-location\"\n                      />\n                    </div>\n\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <Label htmlFor=\"driverAge\">Driver Age</Label>\n                        <Select \n                          required\n                          value={formData.driverAge}\n                          onValueChange={(value) => setFormData({ ...formData, driverAge: value })}\n                        >\n                          <SelectTrigger data-testid=\"select-driver-age\">\n                            <SelectValue placeholder=\"Select age range\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"21-25\">21-25 years</SelectItem>\n                            <SelectItem value=\"26-35\">26-35 years</SelectItem>\n                            <SelectItem value=\"36-65\">36-65 years</SelectItem>\n                            <SelectItem value=\"65+\">65+ years</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                      <div>\n                        <Label htmlFor=\"phoneNumber\">Phone Number</Label>\n                        <Input\n                          id=\"phoneNumber\"\n                          type=\"tel\"\n                          placeholder=\"+1 (555) 123-4567\"\n                          required\n                          value={formData.phoneNumber}\n                          onChange={(e) => setFormData({ ...formData, phoneNumber: e.target.value })}\n                          data-testid=\"input-phone-number\"\n                        />\n                      </div>\n                    </div>\n\n                    <Separator />\n\n                    {/* Booking Summary */}\n                    <div className=\"bg-slate-50 rounded-lg p-4 space-y-3\">\n                      <h3 className=\"font-semibold text-slate-800\" data-testid=\"text-booking-summary\">Booking Summary</h3>\n                      <div className=\"flex justify-between text-sm\">\n                        <span className=\"text-slate-600\">Vehicle:</span>\n                        <span data-testid=\"text-vehicle-model\">{ride.model}</span>\n                      </div>\n                      <div className=\"flex justify-between text-sm\">\n                        <span className=\"text-slate-600\">Daily Rate:</span>\n                        <span data-testid=\"text-daily-rate\">${ride.pricePerDay}/day</span>\n                      </div>\n                      <div className=\"flex justify-between text-sm\">\n                        <span className=\"text-slate-600\">Duration:</span>\n                        <span data-testid=\"text-duration\">{calculateDays()} days</span>\n                      </div>\n                      <div className=\"flex justify-between text-sm\">\n                        <span className=\"text-slate-600\">Insurance:</span>\n                        <span>$15/day</span>\n                      </div>\n                      <Separator />\n                      <div className=\"flex justify-between font-semibold\">\n                        <span>Total:</span>\n                        <span data-testid=\"text-total-amount\">${calculateTotal()}</span>\n                      </div>\n                    </div>\n\n                    <div className=\"flex space-x-4\">\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        className=\"flex-1\"\n                        onClick={() => navigate(\"/rides\")}\n                        data-testid=\"button-cancel\"\n                      >\n                        Cancel\n                      </Button>\n                      <Button\n                        type=\"submit\"\n                        className=\"flex-1\"\n                        disabled={bookingMutation.isPending}\n                        data-testid=\"button-proceed-payment\"\n                      >\n                        {bookingMutation.isPending ? \"Processing...\" : \"Proceed to Payment\"}\n                      </Button>\n                    </div>\n                  </form>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":13647},"client/src/pages/checkout.tsx":{"content":"import { useStripe, Elements, PaymentElement, useElements } from '@stripe/react-stripe-js';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { useEffect, useState } from 'react';\nimport { useParams, useLocation } from \"wouter\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport Navigation from \"@/components/navigation\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport type { BookingWithDetails } from \"@shared/schema\";\n\n// Make sure to call `loadStripe` outside of a component's render to avoid\n// recreating the `Stripe` object on every render.\nif (!import.meta.env.VITE_STRIPE_PUBLIC_KEY) {\n  throw new Error('Missing required Stripe key: VITE_STRIPE_PUBLIC_KEY');\n}\nconst stripePromise = loadStripe(import.meta.env.VITE_STRIPE_PUBLIC_KEY);\n\nconst CheckoutForm = ({ booking }: { booking: BookingWithDetails }) => {\n  const stripe = useStripe();\n  const elements = useElements();\n  const { toast } = useToast();\n  const [, navigate] = useLocation();\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  const confirmPaymentMutation = useMutation({\n    mutationFn: async (paymentIntentId: string) => {\n      const response = await apiRequest(\"POST\", \"/api/confirm-payment\", { paymentIntentId });\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Payment Successful\",\n        description: \"Your booking has been confirmed!\",\n      });\n      navigate(\"/dashboard\");\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Payment Failed\",\n        description: error.message || \"Failed to process payment\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsProcessing(true);\n\n    if (!stripe || !elements) {\n      setIsProcessing(false);\n      return;\n    }\n\n    const { error, paymentIntent } = await stripe.confirmPayment({\n      elements,\n      confirmParams: {\n        return_url: window.location.origin + \"/dashboard\",\n      },\n      redirect: 'if_required',\n    });\n\n    if (error) {\n      toast({\n        title: \"Payment Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    } else if (paymentIntent && paymentIntent.status === 'succeeded') {\n      confirmPaymentMutation.mutate(paymentIntent.id);\n    }\n\n    setIsProcessing(false);\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Payment Information</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          <PaymentElement />\n          \n          <Separator />\n          \n          {/* Booking Summary */}\n          <div className=\"space-y-3\">\n            <h3 className=\"font-semibold text-slate-800\">Booking Summary</h3>\n            <div className=\"flex justify-between text-sm\">\n              <span className=\"text-slate-600\">Vehicle:</span>\n              <span data-testid=\"text-vehicle-summary\">{booking.ride.model}</span>\n            </div>\n            <div className=\"flex justify-between text-sm\">\n              <span className=\"text-slate-600\">Dates:</span>\n              <span data-testid=\"text-dates-summary\">\n                {new Date(booking.pickupDate).toLocaleDateString()} - {new Date(booking.returnDate).toLocaleDateString()}\n              </span>\n            </div>\n            <div className=\"flex justify-between text-sm\">\n              <span className=\"text-slate-600\">Location:</span>\n              <span data-testid=\"text-location-summary\">{booking.pickupLocation}</span>\n            </div>\n            <Separator />\n            <div className=\"flex justify-between font-semibold\">\n              <span>Total Amount:</span>\n              <span data-testid=\"text-payment-total\">${booking.totalAmount}</span>\n            </div>\n          </div>\n\n          <Button\n            type=\"submit\"\n            className=\"w-full\"\n            disabled={!stripe || isProcessing || confirmPaymentMutation.isPending}\n            data-testid=\"button-submit-payment\"\n          >\n            {isProcessing || confirmPaymentMutation.isPending ? \"Processing...\" : `Pay $${booking.totalAmount}`}\n          </Button>\n        </form>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default function Checkout() {\n  const { bookingId } = useParams();\n  const { isAuthenticated, isLoading: authLoading } = useAuth();\n  const { toast } = useToast();\n  const [clientSecret, setClientSecret] = useState(\"\");\n\n  // Redirect if not authenticated\n  useEffect(() => {\n    if (!authLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, authLoading, toast]);\n\n  const { data: booking, isLoading: bookingLoading } = useQuery<BookingWithDetails>({\n    queryKey: [\"/api/bookings\", bookingId],\n    enabled: !!bookingId && isAuthenticated,\n  });\n\n  useEffect(() => {\n    if (booking && !clientSecret) {\n      // Create PaymentIntent for the booking\n      apiRequest(\"POST\", \"/api/create-payment-intent\", { \n        amount: parseFloat(booking.totalAmount),\n        bookingId: booking.id \n      })\n        .then((res) => res.json())\n        .then((data) => {\n          setClientSecret(data.clientSecret);\n        })\n        .catch((error) => {\n          if (isUnauthorizedError(error)) {\n            toast({\n              title: \"Unauthorized\",\n              description: \"You are logged out. Logging in again...\",\n              variant: \"destructive\",\n            });\n            setTimeout(() => {\n              window.location.href = \"/api/login\";\n            }, 500);\n            return;\n          }\n          toast({\n            title: \"Error\",\n            description: \"Failed to initialize payment\",\n            variant: \"destructive\",\n          });\n        });\n    }\n  }, [booking, clientSecret, toast]);\n\n  if (authLoading || bookingLoading || !booking) {\n    return (\n      <div className=\"min-h-screen bg-slate-50\">\n        <Navigation />\n        <div className=\"container mx-auto px-4 py-16\">\n          <div className=\"max-w-2xl mx-auto\">\n            <Skeleton className=\"h-8 mb-8\" />\n            <Card>\n              <CardContent className=\"p-6 space-y-4\">\n                <Skeleton className=\"h-6\" />\n                <Skeleton className=\"h-32\" />\n                <Skeleton className=\"h-10\" />\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!clientSecret) {\n    return (\n      <div className=\"min-h-screen bg-slate-50\">\n        <Navigation />\n        <div className=\"container mx-auto px-4 py-16\">\n          <div className=\"max-w-2xl mx-auto\">\n            <div className=\"text-center\">\n              <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full mx-auto mb-4\" aria-label=\"Loading\"/>\n              <p>Initializing payment...</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // Make SURE to wrap the form in <Elements> which provides the stripe context.\n  return (\n    <div className=\"min-h-screen bg-slate-50\">\n      <Navigation />\n      \n      <div className=\"container mx-auto px-4 py-16\">\n        <div className=\"max-w-2xl mx-auto\">\n          <h1 className=\"text-3xl font-bold text-slate-800 mb-8\">Complete Payment</h1>\n          \n          <Elements stripe={stripePromise} options={{ clientSecret }}>\n            <CheckoutForm booking={booking} />\n          </Elements>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8373},"client/src/pages/home.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport Navigation from \"@/components/navigation\";\nimport HeroSection from \"@/components/hero-section\";\nimport FeaturedRides from \"@/components/featured-rides\";\nimport FeaturesSection from \"@/components/features-section\";\nimport ServicesSection from \"@/components/services-section\";\nimport Footer from \"@/components/footer\";\n\nexport default function Home() {\n  const { user } = useAuth();\n\n  return (\n    <div className=\"min-h-screen bg-white\">\n      <Navigation />\n      <HeroSection />\n      <FeaturedRides />\n      <ServicesSection />\n      <FeaturesSection />\n      <Footer />\n    </div>\n  );\n}","size_bytes":712},"client/src/pages/landing.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport Navigation from \"@/components/navigation\";\nimport FeaturedRides from \"@/components/featured-rides\";\nimport FeaturesSection from \"@/components/features-section\";\nimport Footer from \"@/components/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card } from \"@/components/ui/card\";\nimport { MapPin, Calendar, Search } from \"lucide-react\";\n\nexport default function Landing() {\n  const [, navigate] = useLocation();\n  const [searchForm, setSearchForm] = useState({\n    location: \"\",\n    pickupDate: \"\",\n    returnDate: \"\",\n  });\n\n  const handleSearch = () => {\n    navigate(\"/rides\");\n  };\n\n  const handleGetStarted = () => {\n    window.location.href = \"/api/login\";\n  };\n\n  return (\n    <div className=\"min-h-screen\">\n      <Navigation />\n      \n      {/* Hero Section */}\n      <div className=\"relative min-h-[80vh] flex items-center justify-center\">\n        {/* Background Image */}\n        <div \n          className=\"absolute inset-0 bg-cover bg-center bg-no-repeat\"\n          style={{\n            backgroundImage: \"url('https://images.unsplash.com/photo-1449824913935-59a10b8d2000?w=1920&h=1080&fit=crop')\",\n          }}\n        >\n          {/* Dark overlay */}\n          <div className=\"absolute inset-0 bg-black/50\"></div>\n        </div>\n\n        {/* Content */}\n        <div className=\"relative z-10 container mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <h1 className=\"text-4xl md:text-5xl lg:text-6xl font-bold text-white mb-4\">\n            Your Perfect\n            <span className=\"block text-orange-400\">Ride Awaits</span>\n          </h1>\n          <p className=\"text-xl text-white/90 mb-12 max-w-2xl mx-auto\">\n            Book premium vehicles for any occasion. From luxury sedans to spacious SUVs, find the perfect ride for your journey.\n          </p>\n\n          {/* Search Form */}\n          <Card className=\"max-w-4xl mx-auto p-6 bg-white/95 backdrop-blur-sm\">\n            <div className=\"grid md:grid-cols-4 gap-4\">\n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium text-slate-700 flex items-center\">\n                  <MapPin className=\"w-4 h-4 mr-1\" />\n                  Location\n                </label>\n                <Input\n                  placeholder=\"City or Airport\"\n                  value={searchForm.location}\n                  onChange={(e) => setSearchForm({...searchForm, location: e.target.value})}\n                  data-testid=\"input-search-location\"\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium text-slate-700 flex items-center\">\n                  <Calendar className=\"w-4 h-4 mr-1\" />\n                  Pick-up Date\n                </label>\n                <Input\n                  type=\"date\"\n                  value={searchForm.pickupDate}\n                  onChange={(e) => setSearchForm({...searchForm, pickupDate: e.target.value})}\n                  data-testid=\"input-search-pickup\"\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium text-slate-700 flex items-center\">\n                  <Calendar className=\"w-4 h-4 mr-1\" />\n                  Return Date\n                </label>\n                <Input\n                  type=\"date\"\n                  value={searchForm.returnDate}\n                  onChange={(e) => setSearchForm({...searchForm, returnDate: e.target.value})}\n                  data-testid=\"input-search-return\"\n                />\n              </div>\n              \n              <div className=\"flex items-end\">\n                <Button \n                  onClick={handleSearch}\n                  className=\"w-full bg-orange-500 hover:bg-orange-600 text-white\"\n                  data-testid=\"button-search-rides\"\n                >\n                  <Search className=\"w-4 h-4 mr-2\" />\n                  Search Rides\n                </Button>\n              </div>\n            </div>\n          </Card>\n\n          <div className=\"mt-12 flex justify-center gap-8\">\n            <Button \n              onClick={() => navigate(\"/rides\")}\n              className=\"bg-blue-600 hover:bg-blue-700 text-white px-8 py-3\"\n              data-testid=\"button-browse-rides\"\n            >\n              Browse All Rides\n            </Button>\n            <Button \n              onClick={handleGetStarted}\n              variant=\"outline\" \n              className=\"border-white text-white hover:bg-white hover:text-slate-800 px-8 py-3\"\n              data-testid=\"button-get-started\"\n            >\n              Get Started\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Statistics Section */}\n      <div className=\"bg-slate-800 text-white py-16\">\n        <div className=\"container mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid md:grid-cols-4 gap-8 text-center\">\n            <div>\n              <div className=\"text-4xl font-bold text-orange-400 mb-2\">100+</div>\n              <div className=\"text-slate-300\">Premium Vehicles</div>\n            </div>\n            <div>\n              <div className=\"text-4xl font-bold text-orange-400 mb-2\">50+</div>\n              <div className=\"text-slate-300\">Locations</div>\n            </div>\n            <div>\n              <div className=\"text-4xl font-bold text-orange-400 mb-2\">99%</div>\n              <div className=\"text-slate-300\">Customer Satisfaction</div>\n            </div>\n            <div>\n              <div className=\"text-4xl font-bold text-orange-400 mb-2\">24/7</div>\n              <div className=\"text-slate-300\">Support</div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <FeaturedRides />\n      <FeaturesSection />\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":5919},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/rides.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport Navigation from \"@/components/navigation\";\nimport SearchFilters from \"@/components/search-filters\";\nimport RideCard from \"@/components/ride-card\";\nimport Footer from \"@/components/footer\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport type { Ride, RideSearchFilters } from \"@shared/schema\";\n\nexport default function Rides() {\n  const [filters, setFilters] = useState<RideSearchFilters>({});\n\n  const { data: rides, isLoading } = useQuery<Ride[]>({\n    queryKey: [\"/api/rides\", filters],\n  });\n\n  const handleFiltersChange = (newFilters: RideSearchFilters) => {\n    setFilters(newFilters);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-slate-50\">\n      <Navigation />\n      \n      <div className=\"bg-gradient-to-br from-blue-50 to-indigo-100 py-16\">\n        <div className=\"container mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-8\">\n            <h1 className=\"text-3xl lg:text-4xl font-bold text-slate-800 mb-4\">\n              Browse Available Rides\n            </h1>\n            <p className=\"text-xl text-slate-600 max-w-3xl mx-auto\">\n              Find the perfect vehicle for your journey from our extensive fleet.\n            </p>\n          </div>\n\n          <SearchFilters filters={filters} onFiltersChange={handleFiltersChange} />\n        </div>\n      </div>\n\n      <div className=\"py-16\">\n        <div className=\"container mx-auto px-4 sm:px-6 lg:px-8\">\n          {isLoading ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8\">\n              {[1, 2, 3, 4, 5, 6, 7, 8].map((i) => (\n                <div key={i} className=\"bg-white rounded-2xl shadow-lg border border-slate-200/60 overflow-hidden\">\n                  <Skeleton className=\"w-full aspect-[4/3]\" />\n                  <div className=\"p-6 space-y-4\">\n                    <div className=\"space-y-2\">\n                      <Skeleton className=\"h-7 w-3/4\" />\n                      <Skeleton className=\"h-4 w-1/2\" />\n                    </div>\n                    <div className=\"grid grid-cols-3 gap-3\">\n                      {[1, 2, 3].map((j) => (\n                        <Skeleton key={j} className=\"h-16 rounded-xl\" />\n                      ))}\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <Skeleton className=\"h-5 w-24\" />\n                      <Skeleton className=\"h-4 w-20\" />\n                    </div>\n                    <Skeleton className=\"h-12 w-full rounded-xl\" />\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : rides && rides.length > 0 ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8\">\n              {rides.map((ride) => (\n                <RideCard key={ride.id} ride={ride} />\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-16\">\n              <div className=\"text-6xl text-slate-300 mb-4\">🚗</div>\n              <h3 className=\"text-xl font-semibold text-slate-800 mb-2\">No rides found</h3>\n              <p className=\"text-slate-600\">Try adjusting your search filters to find available rides.</p>\n            </div>\n          )}\n        </div>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":3392},"client/src/pages/user-dashboard.tsx":{"content":"import { useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLocation } from \"wouter\";\nimport Navigation from \"@/components/navigation\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { User, Calendar, CreditCard, LogOut, Plus } from \"lucide-react\";\nimport type { BookingWithDetails } from \"@shared/schema\";\n\nexport default function UserDashboard() {\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const { toast } = useToast();\n  const [, navigate] = useLocation();\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: bookings, isLoading: bookingsLoading, error } = useQuery<BookingWithDetails[]>({\n    queryKey: [\"/api/bookings\"],\n    enabled: isAuthenticated,\n    retry: false,\n  });\n\n  // Handle unauthorized error\n  useEffect(() => {\n    if (error && isUnauthorizedError(error)) {\n      toast({\n        title: \"Unauthorized\", \n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n    }\n  }, [error, toast]);\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'confirmed':\n        return 'bg-green-100 text-green-800';\n      case 'pending':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'cancelled':\n        return 'bg-red-100 text-red-800';\n      case 'completed':\n        return 'bg-gray-100 text-gray-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getUserInitials = (firstName?: string, lastName?: string) => {\n    const first = firstName?.charAt(0) || '';\n    const last = lastName?.charAt(0) || '';\n    return (first + last).toUpperCase() || 'U';\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-slate-50\">\n        <Navigation />\n        <div className=\"container mx-auto px-4 py-16\">\n          <div className=\"animate-pulse\">\n            <div className=\"h-8 bg-slate-200 rounded mb-8\"></div>\n            <div className=\"grid lg:grid-cols-4 gap-8\">\n              <div className=\"h-64 bg-slate-200 rounded\"></div>\n              <div className=\"lg:col-span-3 space-y-4\">\n                <div className=\"h-32 bg-slate-200 rounded\"></div>\n                <div className=\"h-32 bg-slate-200 rounded\"></div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-slate-50\">\n      <Navigation />\n      \n      <div className=\"container mx-auto px-4 py-16\">\n        <div className=\"max-w-6xl mx-auto\">\n          <div className=\"grid lg:grid-cols-4 gap-8\">\n            {/* Sidebar */}\n            <div className=\"lg:col-span-1\">\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"text-center mb-6\">\n                    <Avatar className=\"w-20 h-20 mx-auto mb-4\">\n                      <AvatarImage src={user?.profileImageUrl} />\n                      <AvatarFallback className=\"bg-primary text-white text-xl\">\n                        {getUserInitials(user?.firstName, user?.lastName)}\n                      </AvatarFallback>\n                    </Avatar>\n                    <h3 className=\"font-semibold text-slate-800\" data-testid=\"text-user-name\">\n                      {user?.firstName && user?.lastName \n                        ? `${user.firstName} ${user.lastName}` \n                        : user?.email || 'User'}\n                    </h3>\n                    <p className=\"text-sm text-slate-600\" data-testid=\"text-user-email\">{user?.email}</p>\n                  </div>\n                  \n                  <nav className=\"space-y-2\">\n                    <div className=\"flex items-center px-4 py-2 text-primary bg-blue-50 rounded-lg font-medium\">\n                      <Calendar className=\"w-4 h-4 mr-2\" />\n                      My Bookings\n                    </div>\n                    <button \n                      className=\"w-full text-left flex items-center px-4 py-2 text-slate-600 hover:bg-slate-50 rounded-lg\"\n                      data-testid=\"link-profile\"\n                    >\n                      <User className=\"w-4 h-4 mr-2\" />\n                      Profile Settings\n                    </button>\n                    <button \n                      className=\"w-full text-left flex items-center px-4 py-2 text-slate-600 hover:bg-slate-50 rounded-lg\"\n                      data-testid=\"link-payments\"\n                    >\n                      <CreditCard className=\"w-4 h-4 mr-2\" />\n                      Payment Methods\n                    </button>\n                    <button \n                      className=\"w-full text-left flex items-center px-4 py-2 text-red-600 hover:bg-red-50 rounded-lg\"\n                      onClick={() => window.location.href = \"/api/logout\"}\n                      data-testid=\"link-logout\"\n                    >\n                      <LogOut className=\"w-4 h-4 mr-2\" />\n                      Logout\n                    </button>\n                  </nav>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Main Content */}\n            <div className=\"lg:col-span-3\">\n              <div className=\"space-y-6\">\n                <div className=\"flex justify-between items-center\">\n                  <h2 className=\"text-2xl font-bold text-slate-800\">My Bookings</h2>\n                  <Button onClick={() => navigate(\"/rides\")} data-testid=\"button-new-booking\">\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    New Booking\n                  </Button>\n                </div>\n\n                {bookingsLoading ? (\n                  <div className=\"space-y-4\">\n                    {[1, 2, 3].map((i) => (\n                      <Card key={i}>\n                        <CardContent className=\"p-6\">\n                          <div className=\"animate-pulse flex items-center space-x-4\">\n                            <Skeleton className=\"w-16 h-12\" />\n                            <div className=\"flex-1 space-y-2\">\n                              <Skeleton className=\"h-4\" />\n                              <Skeleton className=\"h-4 w-2/3\" />\n                            </div>\n                            <Skeleton className=\"w-24 h-8\" />\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                ) : bookings && bookings.length > 0 ? (\n                  <div className=\"space-y-4\">\n                    {bookings.map((booking) => (\n                      <Card key={booking.id} data-testid={`card-booking-${booking.id}`}>\n                        <CardContent className=\"p-6\">\n                          <div className=\"flex items-center justify-between mb-4\">\n                            <div className=\"flex items-center space-x-4\">\n                              <Badge className={getStatusColor(booking.status)} data-testid={`status-${booking.id}`}>\n                                {booking.status?.charAt(0).toUpperCase() + booking.status?.slice(1) || 'Pending'}\n                              </Badge>\n                              <span className=\"text-slate-600\" data-testid={`booking-id-${booking.id}`}>\n                                Booking #{booking.id.slice(-6)}\n                              </span>\n                            </div>\n                            <span className=\"text-slate-600\" data-testid={`booking-dates-${booking.id}`}>\n                              {new Date(booking.pickupDate).toLocaleDateString()} - {new Date(booking.returnDate).toLocaleDateString()}\n                            </span>\n                          </div>\n                          \n                          <div className=\"grid md:grid-cols-3 gap-6\">\n                            <div className=\"flex items-center space-x-4\">\n                              <img\n                                src={booking.ride.imageUrl}\n                                alt={`${booking.ride.model} booking thumbnail`}\n                                className=\"w-16 h-12 object-cover rounded-lg\"\n                              />\n                              <div>\n                                <h4 className=\"font-semibold text-slate-800\" data-testid={`vehicle-${booking.id}`}>\n                                  {booking.ride.model}\n                                </h4>\n                                <p className=\"text-sm text-slate-600\" data-testid={`location-${booking.id}`}>\n                                  {booking.pickupLocation}\n                                </p>\n                              </div>\n                            </div>\n                            \n                            <div className=\"space-y-1\">\n                              <p className=\"text-sm text-slate-600\">Total Amount</p>\n                              <p className=\"text-xl font-bold text-slate-800\" data-testid={`amount-${booking.id}`}>\n                                ${booking.totalAmount}\n                              </p>\n                            </div>\n                            \n                            <div className=\"flex space-x-2\">\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                className=\"flex-1\"\n                                data-testid={`button-details-${booking.id}`}\n                              >\n                                View Details\n                              </Button>\n                              {booking.status === 'confirmed' && (\n                                <Button\n                                  size=\"sm\"\n                                  className=\"flex-1\"\n                                  data-testid={`button-modify-${booking.id}`}\n                                >\n                                  Modify\n                                </Button>\n                              )}\n                            </div>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                ) : (\n                  <Card>\n                    <CardContent className=\"p-12 text-center\">\n                      <div className=\"text-6xl text-slate-300 mb-4\">📅</div>\n                      <h3 className=\"text-xl font-semibold text-slate-800 mb-2\">No bookings yet</h3>\n                      <p className=\"text-slate-600 mb-6\">Start your journey by booking your first ride.</p>\n                      <Button onClick={() => navigate(\"/rides\")} data-testid=\"button-browse-rides\">\n                        Browse Available Rides\n                      </Button>\n                    </CardContent>\n                  </Card>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":11771},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-xl text-sm font-semibold transition-all duration-300 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 active:scale-[0.98]\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-gradient-to-r from-primary to-primary/90 text-white hover:from-primary/90 hover:to-primary shadow-lg hover:shadow-xl hover:-translate-y-0.5\",\n        destructive:\n          \"bg-gradient-to-r from-destructive to-destructive/90 text-white hover:from-destructive/90 hover:to-destructive shadow-lg hover:shadow-xl\",\n        outline:\n          \"border-2 border-slate-200 bg-white hover:bg-slate-50 hover:border-primary hover:text-primary shadow-sm hover:shadow-md\",\n        secondary:\n          \"bg-gradient-to-r from-slate-100 to-slate-200 text-slate-800 hover:from-slate-200 hover:to-slate-300 shadow-sm hover:shadow-md\",\n        ghost: \"hover:bg-slate-100 hover:text-slate-900 rounded-xl\",\n        link: \"text-primary underline-offset-4 hover:underline hover:text-primary/80\",\n      },\n      size: {\n        default: \"h-12 px-6 py-3 text-base\",\n        sm: \"h-10 px-4 py-2 text-sm rounded-lg\",\n        lg: \"h-14 px-8 py-4 text-lg rounded-2xl\",\n        icon: \"h-12 w-12 rounded-xl\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }","size_bytes":2259},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"\nimport * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst cardVariants = cva(\n  \"rounded-xl border bg-card text-card-foreground shadow-card transition-all duration-200\",\n  {\n    variants: {\n      variant: {\n        default: \"border-border\",\n        elevated: \"shadow-lg hover:shadow-card-hover\",\n        outlined: \"border-2 border-primary/20 bg-background\",\n        ghost: \"border-transparent bg-muted/50\",\n        gradient: \"bg-gradient-primary text-white border-primary\",\n      },\n      size: {\n        default: \"\",\n        sm: \"text-sm\",\n        lg: \"text-lg\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof cardVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(cardVariants({ variant, size, className }))}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-2 p-6 pb-4\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight text-balance\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground text-pretty leading-relaxed\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center justify-between p-6 pt-4\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent, cardVariants }\n","size_bytes":2619},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-12 w-full rounded-xl border-2 border-slate-200 bg-white px-4 py-3 text-base font-medium ring-offset-background file:border-0 file:bg-transparent file:text-base file:font-semibold file:text-foreground placeholder:text-slate-500 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-primary/20 focus-visible:border-primary transition-all duration-300 disabled:cursor-not-allowed disabled:opacity-50 hover:border-slate-300 hover:shadow-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }","size_bytes":863},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/services-section.tsx":{"content":"\nimport { motion } from \"framer-motion\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Car,\n  Shield,\n  Clock,\n  Star,\n  MapPin,\n  CreditCard,\n  Smartphone,\n  Users,\n  Zap,\n  Globe,\n  Award,\n  CheckCircle,\n} from \"lucide-react\";\n\nexport default function ServicesSection() {\n  const services = [\n    {\n      icon: Car,\n      title: \"Premium Fleet\",\n      description: \"Access to luxury sedans, SUVs, and electric vehicles maintained to the highest standards.\",\n      features: [\"Mercedes-Benz\", \"BMW\", \"Tesla\", \"Audi\"],\n      color: \"from-blue-500/10 to-blue-600/5\",\n      iconColor: \"text-blue-600\",\n    },\n    {\n      icon: Shield,\n      title: \"Safety First\",\n      description: \"All drivers undergo comprehensive background checks and vehicle inspections for your security.\",\n      features: [\"Background Checks\", \"Insurance Coverage\", \"Real-time Tracking\", \"Emergency Support\"],\n      color: \"from-green-500/10 to-green-600/5\",\n      iconColor: \"text-green-600\",\n    },\n    {\n      icon: Clock,\n      title: \"On-Demand Service\",\n      description: \"Book instantly or schedule rides in advance. Available 24/7 across all major cities.\",\n      features: [\"Instant Booking\", \"Advance Scheduling\", \"24/7 Service\", \"City Coverage\"],\n      color: \"from-purple-500/10 to-purple-600/5\",\n      iconColor: \"text-purple-600\",\n    },\n    {\n      icon: Star,\n      title: \"Premium Experience\",\n      description: \"Enjoy complimentary amenities, professional service, and a consistently exceptional ride experience.\",\n      features: [\"WiFi Access\", \"Phone Chargers\", \"Refreshments\", \"Professional Drivers\"],\n      color: \"from-amber-500/10 to-amber-600/5\",\n      iconColor: \"text-amber-600\",\n    },\n    {\n      icon: CreditCard,\n      title: \"Flexible Payments\",\n      description: \"Multiple payment options with transparent pricing and no hidden fees or surge pricing.\",\n      features: [\"Credit Cards\", \"Digital Wallets\", \"Corporate Billing\", \"Fixed Rates\"],\n      color: \"from-rose-500/10 to-rose-600/5\",\n      iconColor: \"text-rose-600\",\n    },\n    {\n      icon: Smartphone,\n      title: \"Smart Technology\",\n      description: \"Intuitive mobile app with real-time tracking, driver communication, and ride history.\",\n      features: [\"iOS & Android\", \"Real-time GPS\", \"Driver Chat\", \"Trip History\"],\n      color: \"from-indigo-500/10 to-indigo-600/5\",\n      iconColor: \"text-indigo-600\",\n    },\n  ];\n\n  return (\n    <section className=\"py-32 px-4 sm:px-6 lg:px-8 bg-white relative overflow-hidden\">\n      {/* Background decoration */}\n      <div className=\"absolute inset-0\">\n        <div className=\"absolute inset-0 bg-[linear-gradient(to_right,#8080800a_1px,transparent_1px),linear-gradient(to_bottom,#8080800a_1px,transparent_1px)] bg-[size:20px_20px]\"></div>\n      </div>\n      \n      <div className=\"max-w-7xl mx-auto relative z-10\">\n        <motion.div \n          className=\"text-center mb-20\"\n          initial={{ opacity: 0, y: 20 }}\n          whileInView={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.6 }}\n          viewport={{ once: true }}\n        >\n          <div className=\"inline-flex items-center gap-2 px-4 py-2 bg-primary/10 text-primary rounded-full text-sm font-semibold mb-6 border border-primary/10\">\n            <Zap className=\"w-4 h-4\" />\n            Our Services\n          </div>\n          \n          <h2 className=\"text-5xl md:text-6xl lg:text-7xl font-black text-slate-900 mb-8 font-display leading-tight\">\n            Everything You Need\n            <span className=\"block bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent\">\n              In One Platform\n            </span>\n          </h2>\n          \n          <p className=\"text-xl md:text-2xl text-slate-600 max-w-4xl mx-auto leading-relaxed font-body\">\n            From luxury vehicles to professional drivers, we provide comprehensive transportation solutions that exceed expectations.\n          </p>\n        </motion.div>\n        \n        <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8 mb-16\">\n          {services.map((service, index) => (\n            <motion.div\n              key={index}\n              initial={{ opacity: 0, y: 20 }}\n              whileInView={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.6, delay: index * 0.1 }}\n              viewport={{ once: true }}\n            >\n              <Card className=\"h-full border-0 shadow-lg hover:shadow-xl transition-all duration-300 hover:-translate-y-2 bg-white rounded-3xl overflow-hidden group\">\n                <CardContent className=\"p-8\">\n                  <div className={`inline-flex items-center justify-center w-16 h-16 bg-gradient-to-r ${service.color} rounded-2xl mb-6 group-hover:scale-110 transition-transform duration-300`}>\n                    <service.icon className={`w-8 h-8 ${service.iconColor}`} />\n                  </div>\n                  \n                  <h3 className=\"text-2xl font-bold text-slate-900 mb-4 font-display\">{service.title}</h3>\n                  <p className=\"text-slate-600 leading-relaxed text-lg mb-6\">{service.description}</p>\n                  \n                  <div className=\"space-y-2\">\n                    {service.features.map((feature, featureIndex) => (\n                      <div key={featureIndex} className=\"flex items-center gap-2\">\n                        <CheckCircle className=\"w-4 h-4 text-accent flex-shrink-0\" />\n                        <span className=\"text-slate-600 font-medium\">{feature}</span>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            </motion.div>\n          ))}\n        </div>\n        \n        {/* CTA Section */}\n        <motion.div \n          className=\"text-center\"\n          initial={{ opacity: 0, y: 20 }}\n          whileInView={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.6, delay: 0.3 }}\n          viewport={{ once: true }}\n        >\n          <Card className=\"bg-gradient-to-r from-primary/5 via-blue-50/50 to-accent/5 border-0 rounded-3xl overflow-hidden max-w-4xl mx-auto\">\n            <CardContent className=\"p-12 text-center\">\n              <div className=\"flex justify-center mb-6\">\n                <div className=\"p-4 bg-gradient-to-r from-primary/20 to-accent/20 rounded-2xl\">\n                  <Award className=\"w-12 h-12 text-primary\" />\n                </div>\n              </div>\n              \n              <h3 className=\"text-4xl font-black text-slate-900 mb-4 font-display\">\n                Ready to Experience Premium Transportation?\n              </h3>\n              <p className=\"text-xl text-slate-600 mb-8 leading-relaxed max-w-2xl mx-auto\">\n                Join thousands of satisfied customers who trust RideShare Pro for their transportation needs.\n              </p>\n              \n              <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n                <Button \n                  size=\"lg\" \n                  className=\"h-16 px-8 bg-gradient-to-r from-primary to-primary/90 hover:from-primary/90 hover:to-primary text-white font-bold text-lg rounded-2xl shadow-xl transition-all duration-300 hover:scale-105\"\n                >\n                  <Car className=\"w-5 h-5 mr-2\" />\n                  Book Your First Ride\n                </Button>\n                <Button \n                  size=\"lg\" \n                  variant=\"outline\" \n                  className=\"h-16 px-8 border-2 border-slate-300 text-slate-700 hover:bg-slate-50 font-bold text-lg rounded-2xl transition-all duration-300 hover:scale-105\"\n                >\n                  <Users className=\"w-5 h-5 mr-2\" />\n                  Become a Driver\n                </Button>\n              </div>\n              \n              <div className=\"flex items-center justify-center gap-8 mt-8 text-slate-600\">\n                <div className=\"flex items-center gap-2\">\n                  <Globe className=\"w-5 h-5 text-primary\" />\n                  <span className=\"font-semibold\">100+ Cities</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Users className=\"w-5 h-5 text-primary\" />\n                  <span className=\"font-semibold\">50K+ Customers</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Star className=\"w-5 h-5 text-yellow-400 fill-current\" />\n                  <span className=\"font-semibold\">4.9 Rating</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </motion.div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":8645},"client/src/lib/lenis.ts":{"content":"\nimport Lenis from '@studio-freight/lenis';\n\nexport function initLenis() {\n  const lenis = new Lenis({\n    duration: 1.2,\n    easing: (t) => Math.min(1, 1.001 - Math.pow(2, -10 * t)),\n    direction: 'vertical',\n    gestureDirection: 'vertical',\n    smooth: true,\n    mouseMultiplier: 1,\n    smoothTouch: false,\n    touchMultiplier: 2,\n    infinite: false,\n  });\n\n  function raf(time: number) {\n    lenis.raf(time);\n    requestAnimationFrame(raf);\n  }\n\n  requestAnimationFrame(raf);\n\n  // Add scroll event listener for scroll-triggered animations\n  lenis.on('scroll', ({ scroll, limit, velocity, direction, progress }: any) => {\n    // Trigger animations based on scroll position\n    const elements = document.querySelectorAll('[data-scroll]');\n    elements.forEach((element) => {\n      const rect = element.getBoundingClientRect();\n      const isVisible = rect.top < window.innerHeight && rect.bottom > 0;\n      \n      if (isVisible && !element.classList.contains('animated')) {\n        element.classList.add('animated');\n        const animationType = element.getAttribute('data-scroll');\n        \n        switch (animationType) {\n          case 'fade':\n            element.classList.add('animate-fadeIn');\n            break;\n          case 'slide-up':\n            element.classList.add('animate-slideUp');\n            break;\n          case 'slide-left':\n            element.classList.add('animate-slideInLeft');\n            break;\n          case 'slide-right':\n            element.classList.add('animate-slideInRight');\n            break;\n          case 'scale':\n            element.classList.add('animate-scaleIn');\n            break;\n        }\n      }\n    });\n  });\n\n  return lenis;\n}\n\nexport function scrollTo(target: string | number, options?: any) {\n  const lenis = (window as any).lenis;\n  if (lenis) {\n    lenis.scrollTo(target, options);\n  }\n}\n","size_bytes":1853},"client/src/pages/about.tsx":{"content":"\nimport { useState, useEffect } from \"react\";\nimport { motion } from \"framer-motion\";\nimport Navigation from \"@/components/navigation\";\nimport Footer from \"@/components/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport {\n  Shield,\n  Clock,\n  Users,\n  Award,\n  Target,\n  Heart,\n  Star,\n  CheckCircle,\n  ArrowRight,\n  Quote,\n  Trophy,\n  Globe,\n  Zap,\n  Phone,\n  Mail,\n  MapPin,\n} from \"lucide-react\";\n\nexport default function About() {\n  const [isVisible, setIsVisible] = useState(false);\n\n  useEffect(() => {\n    setIsVisible(true);\n  }, []);\n\n  const containerVariants = {\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: {\n        staggerChildren: 0.1,\n        delayChildren: 0.2,\n      },\n    },\n  };\n\n  const itemVariants = {\n    hidden: { opacity: 0, y: 20 },\n    visible: {\n      opacity: 1,\n      y: 0,\n      transition: {\n        duration: 0.6,\n        ease: [0.21, 1.11, 0.81, 0.99],\n      },\n    },\n  };\n\n  const stats = [\n    { number: \"50,000+\", label: \"Happy Customers\", icon: Users },\n    { number: \"500+\", label: \"Premium Vehicles\", icon: Shield },\n    { number: \"100+\", label: \"Cities Covered\", icon: Globe },\n    { number: \"4.9/5\", label: \"Average Rating\", icon: Star },\n  ];\n\n  const values = [\n    {\n      icon: Shield,\n      title: \"Safety First\",\n      description: \"Every driver is thoroughly vetted, insured, and trained to provide the safest ride experience.\",\n      color: \"from-blue-500/10 to-blue-600/5\",\n      iconColor: \"text-blue-600\",\n    },\n    {\n      icon: Heart,\n      title: \"Customer Centric\",\n      description: \"Your satisfaction is our top priority. We go above and beyond to exceed your expectations.\",\n      color: \"from-red-500/10 to-red-600/5\",\n      iconColor: \"text-red-600\",\n    },\n    {\n      icon: Award,\n      title: \"Excellence\",\n      description: \"We maintain the highest standards in vehicle quality, service delivery, and customer support.\",\n      color: \"from-amber-500/10 to-amber-600/5\",\n      iconColor: \"text-amber-600\",\n    },\n    {\n      icon: Zap,\n      title: \"Innovation\",\n      description: \"Cutting-edge technology meets traditional hospitality to create seamless ride experiences.\",\n      color: \"from-purple-500/10 to-purple-600/5\",\n      iconColor: \"text-purple-600\",\n    },\n  ];\n\n  const team = [\n    {\n      name: \"Sarah Johnson\",\n      role: \"Chief Executive Officer\",\n      image: \"https://images.unsplash.com/photo-1494790108755-2616b612b5e1?w=300&h=300&fit=crop&crop=faces\",\n      description: \"Leading the vision with 15+ years in transportation tech.\",\n    },\n    {\n      name: \"Michael Chen\",\n      role: \"Chief Technology Officer\",\n      image: \"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=300&h=300&fit=crop&crop=faces\",\n      description: \"Building scalable platforms that connect millions of riders.\",\n    },\n    {\n      name: \"Emily Rodriguez\",\n      role: \"Head of Operations\",\n      image: \"https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=300&h=300&fit=crop&crop=faces\",\n      description: \"Ensuring seamless operations across all our markets.\",\n    },\n  ];\n\n  const testimonials = [\n    {\n      quote: \"RideShare Pro has completely transformed how I travel. The reliability and quality of service is unmatched.\",\n      author: \"Jessica Williams\",\n      role: \"Business Executive\",\n      rating: 5,\n    },\n    {\n      quote: \"As someone who travels frequently, I can confidently say this is the best rideshare service available.\",\n      author: \"David Park\",\n      role: \"Consultant\",\n      rating: 5,\n    },\n    {\n      quote: \"The attention to detail and premium experience makes every ride feel special. Highly recommended!\",\n      author: \"Maria Garcia\",\n      role: \"Marketing Director\",\n      rating: 5,\n    },\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-white\">\n      <Navigation />\n      \n      {/* Hero Section */}\n      <section className=\"relative bg-gradient-to-br from-slate-50 via-blue-50/30 to-indigo-50/40 py-32 px-4 sm:px-6 lg:px-8 overflow-hidden\">\n        <div className=\"absolute inset-0\">\n          <div className=\"absolute inset-0 bg-[linear-gradient(to_right,#80808012_1px,transparent_1px),linear-gradient(to_bottom,#80808012_1px,transparent_1px)] bg-[size:24px_24px]\"></div>\n        </div>\n        \n        <div className=\"max-w-7xl mx-auto relative z-10\">\n          <motion.div \n            className=\"text-center\"\n            variants={containerVariants}\n            initial=\"hidden\"\n            animate=\"visible\"\n          >\n            <motion.div \n              className=\"inline-flex items-center gap-2 px-6 py-3 bg-primary/10 text-primary rounded-full text-sm font-semibold mb-8 border border-primary/20\"\n              variants={itemVariants}\n            >\n              <Trophy className=\"w-4 h-4\" />\n              About RideShare Pro\n            </motion.div>\n            \n            <motion.h1 \n              className=\"font-display text-6xl md:text-7xl lg:text-8xl font-black leading-[0.95] text-slate-900 mb-8\"\n              variants={itemVariants}\n            >\n              Redefining\n              <span className=\"block bg-gradient-to-r from-primary via-blue-600 to-accent bg-clip-text text-transparent\">\n                Transportation\n              </span>\n            </motion.h1>\n            \n            <motion.p \n              className=\"text-xl md:text-2xl lg:text-3xl text-slate-600 max-w-4xl mx-auto leading-relaxed font-body mb-12\"\n              variants={itemVariants}\n            >\n              We're on a mission to make premium transportation accessible, reliable, and delightful for everyone, everywhere.\n            </motion.p>\n            \n            <motion.div className=\"flex flex-col sm:flex-row gap-6 justify-center\" variants={itemVariants}>\n              <Button \n                size=\"lg\" \n                className=\"h-16 px-8 bg-gradient-to-r from-primary to-primary/90 hover:from-primary/90 hover:to-primary text-white font-bold text-lg rounded-2xl shadow-xl transition-all duration-300 hover:scale-105\"\n              >\n                Join Our Team\n                <ArrowRight className=\"w-5 h-5 ml-2\" />\n              </Button>\n              <Button \n                size=\"lg\" \n                variant=\"outline\" \n                className=\"h-16 px-8 border-2 border-slate-300 text-slate-700 hover:bg-slate-50 font-bold text-lg rounded-2xl transition-all duration-300 hover:scale-105\"\n              >\n                Our Story\n              </Button>\n            </motion.div>\n          </motion.div>\n        </div>\n      </section>\n\n      {/* Stats Section */}\n      <section className=\"py-20 px-4 sm:px-6 lg:px-8 bg-white\">\n        <div className=\"max-w-7xl mx-auto\">\n          <motion.div \n            className=\"grid grid-cols-2 lg:grid-cols-4 gap-8\"\n            initial={{ opacity: 0, y: 20 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.6 }}\n            viewport={{ once: true }}\n          >\n            {stats.map((stat, index) => (\n              <motion.div\n                key={index}\n                className=\"text-center\"\n                initial={{ opacity: 0, y: 20 }}\n                whileInView={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.6, delay: index * 0.1 }}\n                viewport={{ once: true }}\n              >\n                <div className=\"inline-flex items-center justify-center w-16 h-16 bg-gradient-to-r from-primary/10 to-primary/5 rounded-2xl mb-4\">\n                  <stat.icon className=\"w-8 h-8 text-primary\" />\n                </div>\n                <div className=\"text-5xl lg:text-6xl font-black text-slate-900 mb-2 font-display\">{stat.number}</div>\n                <div className=\"text-lg font-semibold text-slate-600\">{stat.label}</div>\n              </motion.div>\n            ))}\n          </motion.div>\n        </div>\n      </section>\n\n      {/* Our Story Section */}\n      <section className=\"py-32 px-4 sm:px-6 lg:px-8 bg-gradient-to-br from-slate-50 to-blue-50/20\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"grid lg:grid-cols-2 gap-20 items-center\">\n            <motion.div\n              initial={{ opacity: 0, x: -20 }}\n              whileInView={{ opacity: 1, x: 0 }}\n              transition={{ duration: 0.6 }}\n              viewport={{ once: true }}\n            >\n              <div className=\"inline-flex items-center gap-2 px-4 py-2 bg-accent/10 text-accent rounded-full text-sm font-semibold mb-6\">\n                <Target className=\"w-4 h-4\" />\n                Our Story\n              </div>\n              \n              <h2 className=\"text-5xl md:text-6xl font-black text-slate-900 mb-8 font-display leading-tight\">\n                Built on Trust,\n                <span className=\"block text-accent\">Driven by Excellence</span>\n              </h2>\n              \n              <div className=\"space-y-6 text-lg text-slate-600 leading-relaxed\">\n                <p>\n                  Founded in 2020, RideShare Pro emerged from a simple yet powerful vision: to create a rideshare experience that doesn't just meet expectations, but consistently exceeds them.\n                </p>\n                <p>\n                  What started as a small team of passionate innovators has grown into a trusted platform serving thousands of customers across major cities, all while maintaining our commitment to safety, quality, and exceptional service.\n                </p>\n                <p>\n                  Today, we're proud to be the premium choice for discerning travelers who value reliability, comfort, and peace of mind in their transportation experience.\n                </p>\n              </div>\n              \n              <div className=\"flex items-center gap-4 mt-8\">\n                <CheckCircle className=\"w-6 h-6 text-accent\" />\n                <span className=\"font-semibold text-slate-700\">Verified by 50,000+ satisfied customers</span>\n              </div>\n            </motion.div>\n            \n            <motion.div\n              className=\"relative\"\n              initial={{ opacity: 0, x: 20 }}\n              whileInView={{ opacity: 1, x: 0 }}\n              transition={{ duration: 0.6 }}\n              viewport={{ once: true }}\n            >\n              <div className=\"relative overflow-hidden rounded-3xl shadow-2xl\">\n                <img \n                  src=\"https://images.unsplash.com/photo-1521737604893-d14cc237f11d?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600&q=90\" \n                  alt=\"Team collaboration\" \n                  className=\"w-full h-[500px] object-cover\"\n                />\n                <div className=\"absolute inset-0 bg-gradient-to-t from-black/20 via-transparent to-transparent\"></div>\n              </div>\n              <div className=\"absolute -z-10 top-8 right-8 w-full h-full bg-gradient-to-br from-primary/10 to-accent/10 rounded-3xl\"></div>\n            </motion.div>\n          </div>\n        </div>\n      </section>\n\n      {/* Values Section */}\n      <section className=\"py-32 px-4 sm:px-6 lg:px-8 bg-white\">\n        <div className=\"max-w-7xl mx-auto\">\n          <motion.div \n            className=\"text-center mb-20\"\n            initial={{ opacity: 0, y: 20 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.6 }}\n            viewport={{ once: true }}\n          >\n            <div className=\"inline-flex items-center gap-2 px-4 py-2 bg-primary/10 text-primary rounded-full text-sm font-semibold mb-6\">\n              <Heart className=\"w-4 h-4\" />\n              Our Values\n            </div>\n            \n            <h2 className=\"text-5xl md:text-6xl font-black text-slate-900 mb-8 font-display leading-tight\">\n              What Drives Us\n              <span className=\"block bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent\">\n                Every Day\n              </span>\n            </h2>\n          </motion.div>\n          \n          <div className=\"grid md:grid-cols-2 gap-8\">\n            {values.map((value, index) => (\n              <motion.div\n                key={index}\n                initial={{ opacity: 0, y: 20 }}\n                whileInView={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.6, delay: index * 0.1 }}\n                viewport={{ once: true }}\n              >\n                <Card className=\"h-full border-0 shadow-lg hover:shadow-xl transition-all duration-300 hover:-translate-y-2 bg-white rounded-3xl overflow-hidden\">\n                  <CardContent className=\"p-10\">\n                    <div className={`inline-flex items-center justify-center w-16 h-16 bg-gradient-to-r ${value.color} rounded-2xl mb-6`}>\n                      <value.icon className={`w-8 h-8 ${value.iconColor}`} />\n                    </div>\n                    <h3 className=\"text-2xl font-bold text-slate-900 mb-4 font-display\">{value.title}</h3>\n                    <p className=\"text-slate-600 leading-relaxed text-lg\">{value.description}</p>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Team Section */}\n      <section className=\"py-32 px-4 sm:px-6 lg:px-8 bg-gradient-to-br from-slate-50 to-blue-50/20\">\n        <div className=\"max-w-7xl mx-auto\">\n          <motion.div \n            className=\"text-center mb-20\"\n            initial={{ opacity: 0, y: 20 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.6 }}\n            viewport={{ once: true }}\n          >\n            <div className=\"inline-flex items-center gap-2 px-4 py-2 bg-accent/10 text-accent rounded-full text-sm font-semibold mb-6\">\n              <Users className=\"w-4 h-4\" />\n              Our Leadership\n            </div>\n            \n            <h2 className=\"text-5xl md:text-6xl font-black text-slate-900 mb-8 font-display leading-tight\">\n              Meet the Team\n              <span className=\"block text-accent\">Behind the Vision</span>\n            </h2>\n          </motion.div>\n          \n          <div className=\"grid md:grid-cols-3 gap-8\">\n            {team.map((member, index) => (\n              <motion.div\n                key={index}\n                className=\"text-center\"\n                initial={{ opacity: 0, y: 20 }}\n                whileInView={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.6, delay: index * 0.1 }}\n                viewport={{ once: true }}\n              >\n                <Card className=\"border-0 shadow-lg hover:shadow-xl transition-all duration-300 hover:-translate-y-2 bg-white rounded-3xl overflow-hidden\">\n                  <CardContent className=\"p-8\">\n                    <div className=\"relative mb-6\">\n                      <img \n                        src={member.image} \n                        alt={member.name}\n                        className=\"w-32 h-32 rounded-2xl mx-auto object-cover shadow-lg\"\n                      />\n                      <div className=\"absolute -bottom-2 -right-2 w-8 h-8 bg-gradient-to-r from-primary to-accent rounded-full flex items-center justify-center\">\n                        <CheckCircle className=\"w-4 h-4 text-white\" />\n                      </div>\n                    </div>\n                    <h3 className=\"text-2xl font-bold text-slate-900 mb-2 font-display\">{member.name}</h3>\n                    <p className=\"text-primary font-semibold mb-4\">{member.role}</p>\n                    <p className=\"text-slate-600 leading-relaxed\">{member.description}</p>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Testimonials Section */}\n      <section className=\"py-32 px-4 sm:px-6 lg:px-8 bg-white\">\n        <div className=\"max-w-7xl mx-auto\">\n          <motion.div \n            className=\"text-center mb-20\"\n            initial={{ opacity: 0, y: 20 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.6 }}\n            viewport={{ once: true }}\n          >\n            <div className=\"inline-flex items-center gap-2 px-4 py-2 bg-primary/10 text-primary rounded-full text-sm font-semibold mb-6\">\n              <Quote className=\"w-4 h-4\" />\n              Testimonials\n            </div>\n            \n            <h2 className=\"text-5xl md:text-6xl font-black text-slate-900 mb-8 font-display leading-tight\">\n              What Our Customers\n              <span className=\"block bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent\">\n                Are Saying\n              </span>\n            </h2>\n          </motion.div>\n          \n          <div className=\"grid md:grid-cols-3 gap-8\">\n            {testimonials.map((testimonial, index) => (\n              <motion.div\n                key={index}\n                initial={{ opacity: 0, y: 20 }}\n                whileInView={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.6, delay: index * 0.1 }}\n                viewport={{ once: true }}\n              >\n                <Card className=\"h-full border-0 shadow-lg hover:shadow-xl transition-all duration-300 hover:-translate-y-2 bg-white rounded-3xl overflow-hidden\">\n                  <CardContent className=\"p-8\">\n                    <div className=\"flex items-center mb-4\">\n                      {[...Array(testimonial.rating)].map((_, i) => (\n                        <Star key={i} className=\"w-5 h-5 text-yellow-400 fill-current\" />\n                      ))}\n                    </div>\n                    <Quote className=\"w-8 h-8 text-primary/20 mb-4\" />\n                    <p className=\"text-slate-700 text-lg leading-relaxed mb-6 italic\">\n                      \"{testimonial.quote}\"\n                    </p>\n                    <div>\n                      <p className=\"font-bold text-slate-900 font-display\">{testimonial.author}</p>\n                      <p className=\"text-slate-500\">{testimonial.role}</p>\n                    </div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":18233},"client/src/pages/contact.tsx":{"content":"\nimport { useState, useEffect } from \"react\";\nimport { motion } from \"framer-motion\";\nimport Navigation from \"@/components/navigation\";\nimport Footer from \"@/components/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport {\n  Phone,\n  Mail,\n  MapPin,\n  Clock,\n  MessageSquare,\n  Send,\n  CheckCircle,\n  Globe,\n  Headphones,\n  Shield,\n  Zap,\n  Users,\n  Star,\n  ArrowRight,\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Contact() {\n  const [isVisible, setIsVisible] = useState(false);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [formData, setFormData] = useState({\n    name: \"\",\n    email: \"\",\n    phone: \"\",\n    subject: \"\",\n    message: \"\",\n  });\n  const { toast } = useToast();\n\n  useEffect(() => {\n    setIsVisible(true);\n  }, []);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsSubmitting(true);\n    \n    // Simulate form submission\n    setTimeout(() => {\n      setIsSubmitting(false);\n      toast({\n        title: \"Message sent successfully!\",\n        description: \"We'll get back to you within 24 hours.\",\n      });\n      setFormData({ name: \"\", email: \"\", phone: \"\", subject: \"\", message: \"\" });\n    }, 2000);\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n  };\n\n  const containerVariants = {\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: {\n        staggerChildren: 0.1,\n        delayChildren: 0.2,\n      },\n    },\n  };\n\n  const itemVariants = {\n    hidden: { opacity: 0, y: 20 },\n    visible: {\n      opacity: 1,\n      y: 0,\n      transition: {\n        duration: 0.6,\n        ease: [0.21, 1.11, 0.81, 0.99],\n      },\n    },\n  };\n\n  const contactInfo = [\n    {\n      icon: Phone,\n      title: \"Call Us\",\n      details: \"+1 (555) 123-4567\",\n      description: \"Available 24/7 for urgent support\",\n      color: \"from-blue-500/10 to-blue-600/5\",\n      iconColor: \"text-blue-600\",\n    },\n    {\n      icon: Mail,\n      title: \"Email Us\",\n      details: \"support@ridesharepro.com\",\n      description: \"We respond within 2 hours\",\n      color: \"from-green-500/10 to-green-600/5\",\n      iconColor: \"text-green-600\",\n    },\n    {\n      icon: MapPin,\n      title: \"Visit Us\",\n      details: \"123 Business Ave, NY 10001\",\n      description: \"Monday - Friday, 9AM - 6PM\",\n      color: \"from-purple-500/10 to-purple-600/5\",\n      iconColor: \"text-purple-600\",\n    },\n    {\n      icon: Clock,\n      title: \"Support Hours\",\n      details: \"24/7 Premium Support\",\n      description: \"Round-the-clock assistance\",\n      color: \"from-amber-500/10 to-amber-600/5\",\n      iconColor: \"text-amber-600\",\n    },\n  ];\n\n  const supportTypes = [\n    {\n      icon: Headphones,\n      title: \"Customer Support\",\n      description: \"Get help with bookings, payments, or general inquiries\",\n      response: \"< 2 hours\",\n    },\n    {\n      icon: Shield,\n      title: \"Safety & Security\",\n      description: \"Report safety concerns or security issues\",\n      response: \"Immediate\",\n    },\n    {\n      icon: Users,\n      title: \"Partnership\",\n      description: \"Interested in becoming a driver or business partner?\",\n      response: \"< 24 hours\",\n    },\n    {\n      icon: Zap,\n      title: \"Technical Support\",\n      description: \"App issues, bugs, or technical difficulties\",\n      response: \"< 4 hours\",\n    },\n  ];\n\n  const offices = [\n    {\n      city: \"New York\",\n      address: \"123 Business Ave, NY 10001\",\n      phone: \"+1 (555) 123-4567\",\n      email: \"ny@ridesharepro.com\",\n    },\n    {\n      city: \"San Francisco\",\n      address: \"456 Tech Street, SF 94105\",\n      phone: \"+1 (555) 234-5678\",\n      email: \"sf@ridesharepro.com\",\n    },\n    {\n      city: \"Los Angeles\",\n      address: \"789 Sunset Blvd, LA 90028\",\n      phone: \"+1 (555) 345-6789\",\n      email: \"la@ridesharepro.com\",\n    },\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-white\">\n      <Navigation />\n      \n      {/* Hero Section */}\n      <section className=\"relative bg-gradient-to-br from-slate-50 via-blue-50/30 to-indigo-50/40 py-32 px-4 sm:px-6 lg:px-8 overflow-hidden\">\n        <div className=\"absolute inset-0\">\n          <div className=\"absolute inset-0 bg-[linear-gradient(to_right,#80808012_1px,transparent_1px),linear-gradient(to_bottom,#80808012_1px,transparent_1px)] bg-[size:24px_24px]\"></div>\n        </div>\n        \n        <div className=\"max-w-7xl mx-auto relative z-10\">\n          <motion.div \n            className=\"text-center\"\n            variants={containerVariants}\n            initial=\"hidden\"\n            animate=\"visible\"\n          >\n            <motion.div \n              className=\"inline-flex items-center gap-2 px-6 py-3 bg-primary/10 text-primary rounded-full text-sm font-semibold mb-8 border border-primary/20\"\n              variants={itemVariants}\n            >\n              <MessageSquare className=\"w-4 h-4\" />\n              Get In Touch\n            </motion.div>\n            \n            <motion.h1 \n              className=\"font-display text-6xl md:text-7xl lg:text-8xl font-black leading-[0.95] text-slate-900 mb-8\"\n              variants={itemVariants}\n            >\n              We're Here\n              <span className=\"block bg-gradient-to-r from-primary via-blue-600 to-accent bg-clip-text text-transparent\">\n                To Help\n              </span>\n            </motion.h1>\n            \n            <motion.p \n              className=\"text-xl md:text-2xl lg:text-3xl text-slate-600 max-w-4xl mx-auto leading-relaxed font-body mb-12\"\n              variants={itemVariants}\n            >\n              Have questions? Need support? Want to partner with us? We'd love to hear from you.\n            </motion.p>\n            \n            <motion.div className=\"flex items-center justify-center gap-6 text-slate-600\" variants={itemVariants}>\n              <div className=\"flex items-center gap-2\">\n                <CheckCircle className=\"w-5 h-5 text-accent\" />\n                <span className=\"font-semibold\">24/7 Support</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <CheckCircle className=\"w-5 h-5 text-accent\" />\n                <span className=\"font-semibold\">Quick Response</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <CheckCircle className=\"w-5 h-5 text-accent\" />\n                <span className=\"font-semibold\">Expert Team</span>\n              </div>\n            </motion.div>\n          </motion.div>\n        </div>\n      </section>\n\n      {/* Contact Info Cards */}\n      <section className=\"py-20 px-4 sm:px-6 lg:px-8 bg-white\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            {contactInfo.map((info, index) => (\n              <motion.div\n                key={index}\n                initial={{ opacity: 0, y: 20 }}\n                whileInView={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.6, delay: index * 0.1 }}\n                viewport={{ once: true }}\n              >\n                <Card className=\"h-full border-0 shadow-lg hover:shadow-xl transition-all duration-300 hover:-translate-y-2 bg-white rounded-3xl overflow-hidden\">\n                  <CardContent className=\"p-8 text-center\">\n                    <div className={`inline-flex items-center justify-center w-16 h-16 bg-gradient-to-r ${info.color} rounded-2xl mb-6`}>\n                      <info.icon className={`w-8 h-8 ${info.iconColor}`} />\n                    </div>\n                    <h3 className=\"text-xl font-bold text-slate-900 mb-2 font-display\">{info.title}</h3>\n                    <p className=\"text-lg font-semibold text-slate-800 mb-2\">{info.details}</p>\n                    <p className=\"text-slate-600\">{info.description}</p>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Main Contact Section */}\n      <section className=\"py-32 px-4 sm:px-6 lg:px-8 bg-gradient-to-br from-slate-50 to-blue-50/20\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"grid lg:grid-cols-2 gap-20 items-start\">\n            {/* Contact Form */}\n            <motion.div\n              initial={{ opacity: 0, x: -20 }}\n              whileInView={{ opacity: 1, x: 0 }}\n              transition={{ duration: 0.6 }}\n              viewport={{ once: true }}\n            >\n              <Card className=\"border-0 shadow-2xl bg-white rounded-3xl overflow-hidden\">\n                <CardContent className=\"p-10\">\n                  <div className=\"mb-8\">\n                    <h2 className=\"text-4xl font-black text-slate-900 mb-4 font-display\">Send Us a Message</h2>\n                    <p className=\"text-slate-600 text-lg\">Fill out the form below and we'll get back to you as soon as possible.</p>\n                  </div>\n                  \n                  <form onSubmit={handleSubmit} className=\"space-y-6\">\n                    <div className=\"grid md:grid-cols-2 gap-6\">\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"name\" className=\"text-sm font-bold text-slate-800 uppercase tracking-wide\">\n                          Full Name\n                        </Label>\n                        <Input\n                          id=\"name\"\n                          name=\"name\"\n                          placeholder=\"Your full name\"\n                          value={formData.name}\n                          onChange={handleChange}\n                          required\n                          className=\"h-14 border-slate-200 focus:border-primary focus:ring-primary/20 rounded-xl bg-white/90 text-lg font-medium\"\n                        />\n                      </div>\n                      \n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"email\" className=\"text-sm font-bold text-slate-800 uppercase tracking-wide\">\n                          Email Address\n                        </Label>\n                        <Input\n                          id=\"email\"\n                          name=\"email\"\n                          type=\"email\"\n                          placeholder=\"your@email.com\"\n                          value={formData.email}\n                          onChange={handleChange}\n                          required\n                          className=\"h-14 border-slate-200 focus:border-primary focus:ring-primary/20 rounded-xl bg-white/90 text-lg font-medium\"\n                        />\n                      </div>\n                    </div>\n                    \n                    <div className=\"grid md:grid-cols-2 gap-6\">\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"phone\" className=\"text-sm font-bold text-slate-800 uppercase tracking-wide\">\n                          Phone Number\n                        </Label>\n                        <Input\n                          id=\"phone\"\n                          name=\"phone\"\n                          placeholder=\"+1 (555) 123-4567\"\n                          value={formData.phone}\n                          onChange={handleChange}\n                          className=\"h-14 border-slate-200 focus:border-primary focus:ring-primary/20 rounded-xl bg-white/90 text-lg font-medium\"\n                        />\n                      </div>\n                      \n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"subject\" className=\"text-sm font-bold text-slate-800 uppercase tracking-wide\">\n                          Subject\n                        </Label>\n                        <Input\n                          id=\"subject\"\n                          name=\"subject\"\n                          placeholder=\"How can we help?\"\n                          value={formData.subject}\n                          onChange={handleChange}\n                          required\n                          className=\"h-14 border-slate-200 focus:border-primary focus:ring-primary/20 rounded-xl bg-white/90 text-lg font-medium\"\n                        />\n                      </div>\n                    </div>\n                    \n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"message\" className=\"text-sm font-bold text-slate-800 uppercase tracking-wide\">\n                        Message\n                      </Label>\n                      <Textarea\n                        id=\"message\"\n                        name=\"message\"\n                        placeholder=\"Tell us more about your inquiry...\"\n                        value={formData.message}\n                        onChange={handleChange}\n                        required\n                        rows={6}\n                        className=\"border-slate-200 focus:border-primary focus:ring-primary/20 rounded-xl bg-white/90 text-lg font-medium resize-none\"\n                      />\n                    </div>\n                    \n                    <Button\n                      type=\"submit\"\n                      disabled={isSubmitting}\n                      className=\"w-full h-16 bg-gradient-to-r from-primary to-primary/90 hover:from-primary/90 hover:to-primary text-white font-bold text-lg rounded-xl shadow-xl transition-all duration-300 hover:scale-[1.02] disabled:opacity-50\"\n                    >\n                      {isSubmitting ? (\n                        \"Sending...\"\n                      ) : (\n                        <>\n                          Send Message\n                          <Send className=\"w-5 h-5 ml-2\" />\n                        </>\n                      )}\n                    </Button>\n                  </form>\n                </CardContent>\n              </Card>\n            </motion.div>\n            \n            {/* Support Types */}\n            <motion.div\n              className=\"space-y-8\"\n              initial={{ opacity: 0, x: 20 }}\n              whileInView={{ opacity: 1, x: 0 }}\n              transition={{ duration: 0.6 }}\n              viewport={{ once: true }}\n            >\n              <div>\n                <h2 className=\"text-4xl font-black text-slate-900 mb-6 font-display\">How Can We Help?</h2>\n                <p className=\"text-slate-600 text-lg mb-8\">Choose the type of support you need for faster assistance.</p>\n              </div>\n              \n              <div className=\"space-y-4\">\n                {supportTypes.map((type, index) => (\n                  <motion.div\n                    key={index}\n                    initial={{ opacity: 0, y: 20 }}\n                    whileInView={{ opacity: 1, y: 0 }}\n                    transition={{ duration: 0.6, delay: index * 0.1 }}\n                    viewport={{ once: true }}\n                  >\n                    <Card className=\"border-0 shadow-lg hover:shadow-xl transition-all duration-300 hover:-translate-y-1 bg-white rounded-2xl overflow-hidden cursor-pointer group\">\n                      <CardContent className=\"p-6\">\n                        <div className=\"flex items-start space-x-4\">\n                          <div className=\"p-3 bg-gradient-to-r from-primary/10 to-primary/5 rounded-xl group-hover:from-primary/20 group-hover:to-primary/10 transition-colors\">\n                            <type.icon className=\"w-6 h-6 text-primary\" />\n                          </div>\n                          <div className=\"flex-1\">\n                            <div className=\"flex items-center justify-between mb-2\">\n                              <h3 className=\"font-bold text-slate-900 text-lg font-display\">{type.title}</h3>\n                              <span className=\"text-xs font-semibold text-accent bg-accent/10 px-2 py-1 rounded-full\">\n                                {type.response}\n                              </span>\n                            </div>\n                            <p className=\"text-slate-600\">{type.description}</p>\n                          </div>\n                          <ArrowRight className=\"w-5 h-5 text-slate-400 group-hover:text-primary transition-colors\" />\n                        </div>\n                      </CardContent>\n                    </Card>\n                  </motion.div>\n                ))}\n              </div>\n              \n              {/* FAQ Link */}\n              <Card className=\"border-0 shadow-lg bg-gradient-to-r from-primary/5 to-accent/5 rounded-2xl overflow-hidden\">\n                <CardContent className=\"p-6 text-center\">\n                  <MessageSquare className=\"w-12 h-12 text-primary mx-auto mb-4\" />\n                  <h3 className=\"text-xl font-bold text-slate-900 mb-2 font-display\">Frequently Asked Questions</h3>\n                  <p className=\"text-slate-600 mb-4\">Find quick answers to common questions.</p>\n                  <Button variant=\"outline\" className=\"bg-white hover:bg-slate-50\">\n                    View FAQ\n                    <ArrowRight className=\"w-4 h-4 ml-2\" />\n                  </Button>\n                </CardContent>\n              </Card>\n            </motion.div>\n          </div>\n        </div>\n      </section>\n\n      {/* Office Locations */}\n      <section className=\"py-32 px-4 sm:px-6 lg:px-8 bg-white\">\n        <div className=\"max-w-7xl mx-auto\">\n          <motion.div \n            className=\"text-center mb-20\"\n            initial={{ opacity: 0, y: 20 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.6 }}\n            viewport={{ once: true }}\n          >\n            <div className=\"inline-flex items-center gap-2 px-4 py-2 bg-accent/10 text-accent rounded-full text-sm font-semibold mb-6\">\n              <Globe className=\"w-4 h-4\" />\n              Our Locations\n            </div>\n            \n            <h2 className=\"text-5xl md:text-6xl font-black text-slate-900 mb-8 font-display leading-tight\">\n              Visit Our\n              <span className=\"block text-accent\">Offices</span>\n            </h2>\n            \n            <p className=\"text-xl text-slate-600 max-w-3xl mx-auto\">\n              We have offices in major cities to better serve our customers and partners.\n            </p>\n          </motion.div>\n          \n          <div className=\"grid md:grid-cols-3 gap-8\">\n            {offices.map((office, index) => (\n              <motion.div\n                key={index}\n                initial={{ opacity: 0, y: 20 }}\n                whileInView={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.6, delay: index * 0.1 }}\n                viewport={{ once: true }}\n              >\n                <Card className=\"h-full border-0 shadow-lg hover:shadow-xl transition-all duration-300 hover:-translate-y-2 bg-white rounded-3xl overflow-hidden\">\n                  <CardContent className=\"p-8\">\n                    <h3 className=\"text-2xl font-bold text-slate-900 mb-6 font-display\">{office.city}</h3>\n                    \n                    <div className=\"space-y-4\">\n                      <div className=\"flex items-start space-x-3\">\n                        <MapPin className=\"w-5 h-5 text-primary mt-1 flex-shrink-0\" />\n                        <p className=\"text-slate-600\">{office.address}</p>\n                      </div>\n                      \n                      <div className=\"flex items-center space-x-3\">\n                        <Phone className=\"w-5 h-5 text-primary flex-shrink-0\" />\n                        <p className=\"text-slate-600\">{office.phone}</p>\n                      </div>\n                      \n                      <div className=\"flex items-center space-x-3\">\n                        <Mail className=\"w-5 h-5 text-primary flex-shrink-0\" />\n                        <p className=\"text-slate-600\">{office.email}</p>\n                      </div>\n                    </div>\n                    \n                    <Button \n                      variant=\"outline\" \n                      className=\"w-full mt-6 border-primary text-primary hover:bg-primary hover:text-white transition-all duration-300\"\n                    >\n                      Get Directions\n                      <ArrowRight className=\"w-4 h-4 ml-2\" />\n                    </Button>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":20659}}}